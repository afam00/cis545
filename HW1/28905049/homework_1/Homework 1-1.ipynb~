{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-d3e4646f6b0fa61d",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "# Homework 1, Part I: Data Wrangling\n",
    "## Due September 26, 2018 by 10pm\n",
    "\n",
    "Big data analytics often requires (1) importing data from multiple sources, possibly extracting content from text; then (2) combining data from multiple sources, possibly from multiple different organizations, in heterogeneous formats.  For this assignment, our primary goals are to get you comfortable with importing, extracting, saving, and combining data -- largely using Pandas DataFrames as the basic abstraction.  You’ll read data from files, address issues with missing values, save the data in a database, combine the data, and generate visualizations.\n",
    "\n",
    "*The Task*.  Most of you likely were on a plane over the summer, and chances are that at least one of your flights got delayed.  Did you ever wonder how well different airlines do?  We’ll answer those questions in this assignment!  (Caveat: with apologies to international travelers, most of the data is only available for US cities and routes!)\n",
    "\n",
    "*Terminology*.  We’ll generally use *field*, *column*, and *attribute* interchangeably to mean a named column in a DataFrame.  We’ll also generally assume that *table*, *DataFrame*, and *relation* mean the same thing.\n",
    "\n",
    "*Submission*. See the external document for submission information.  Remember to also do **Homework 1, Part 2** and optionally **Homework 1-Advanced**.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-a2f26399ae62bc52",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "## The data in this repository\n",
    "\n",
    "The data files, whose contents are described in the provided notebook _Dataset Descriptions_, are:\n",
    "\n",
    "\n",
    "* `airports.dat.txt` - data on airports, in comma-separated values (CSVs) with no header row\n",
    "\n",
    "* `airlines.dat.txt` - data on airlines, in CSV with no header row\n",
    "\n",
    "* `routes.dat.tx`t - data on flight routes, in CSV with no header row\n",
    "\n",
    "* http://docs.google.com/uc?export=download&id=1PPtjGx8lr_cDUfVa3qwlk1W8yY6hY91n - remote file with data on actual flights, with performance info, with a header row\n",
    "\n",
    "* `aircraft_incidents.htm` - webpage that lists commercial aircraft incidents by year"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-2b362d4124aa2ff2",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "## Step 1: Importing CSV Data\n",
    "\n",
    "The first task will be to import tabular data.  Before you get started, run the following..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-328d075524998a53",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "import csv\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-962e20cf526ce6d7",
     "locked": false,
     "points": 0,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# This cell can ultimately be removed - it is just to let your notebook compile\n",
    "# until you write your solution\n",
    "airports_df = pd.DataFrame({})\n",
    "airlines_df = pd.DataFrame({})\n",
    "flights_df = pd.DataFrame({})\n",
    "routes_df = pd.DataFrame({})\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-d1d845b4670bc241",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "## 1.1 Reading CSVs\n",
    "\n",
    "Fill in the Cells below to read the specified input files using Pandas’ `read_csv` function.  For the first 3 sources you’ll need to assign column names to the data, based on the **Dataset Descriptions** and some hints below.  \n",
    "\n",
    "We use the variable names `airports_df`, `airlines_df`, `routes_df`, and `flights_df` to refer to the DataFrames below. The `_df` is because Python is dynamically typed, so it helps make code more clear when the type is apparent from the variable name.\n",
    "\n",
    "For your variables and your column names, follow the Python convention that names are in lowercase and underscores are used as spaces. Specifically, when naming columns that are shared between datasets, use the format datasource_property (i.e. `airport_id`, `airport_name`, `airline_id`, etc.)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-fc08cc2fd38d3776",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Load airports.dat.txt into a dataframe called airports_df\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "with open('airports.dat.txt') as airport_file:\n",
    "    airports_df = pd.read_csv(airport_file, ',', None, None, ['airport_id',\\\n",
    "                                                           'airport_name',\\\n",
    "                                                           'city',\\\n",
    "                                                           'country',\\\n",
    "                                                           'iata', \\\n",
    "                                                           'icao', \\\n",
    "                                                           'lat',\\\n",
    "                                                           'lon', \\\n",
    "                                                           'alt', \\\n",
    "                                                           'timezone',\\\n",
    "                                                           'dst', \\\n",
    "                                                           'tz']);\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-4d82b0a01562e5c8",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "You should see info on your dataframe's schema if you run this cell..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-ddb2bcb2b7d15315",
     "locked": true,
     "schema_version": 2,
     "solution": false
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "airport_id        int64\n",
       "airport_name     object\n",
       "city             object\n",
       "country          object\n",
       "iata             object\n",
       "icao             object\n",
       "lat             float64\n",
       "lon             float64\n",
       "alt               int64\n",
       "timezone        float64\n",
       "dst              object\n",
       "tz               object\n",
       "dtype: object"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airports_df.dtypes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-cda6f85131933dbc",
     "locked": true,
     "schema_version": 1,
     "solution": false
    }
   },
   "source": [
    "This is the first of many *test case* cells that will help you to (partly) validate that you're on the right path with your answers.  If this (or any of the other cells) fails, this is a clue that your output isn't what we expect."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-5890b3fa1050666d",
     "locked": true,
     "points": 0,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "if len(airports_df) != 8107:\n",
    "    raise ValueError('Your DataFrame doesn''t have the expected number of rows')\n",
    "    \n",
    "if len(airports_df.columns) != 12:\n",
    "    raise ValueError('Your DataFrame doesn''t have the expected number of columns')\n",
    "\n",
    "try:\n",
    "    if len(airports_df['airport_id']) != 8107:\n",
    "        raise ValueError('Your DataFrame doesn''t have the expected number of rows')\n",
    "\n",
    "    if airports_df['airport_id'].dtype != 'int64':\n",
    "        raise ValueError('Airport ID is wrong type, should be integer')\n",
    "\n",
    "    if airports_df['airport_name'].dtype != 'object':\n",
    "        raise ValueError('Airport name is wrong type, should be object (string)')\n",
    "    pass\n",
    "except KeyError:\n",
    "    raise KeyError('You likely misspelled a column name or didn''t load the dataframe')\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-s5890b3fa1050666d",
     "locked": true,
     "points": 2,
     "schema_version": 2,
     "solution": false
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "### BEGIN HIDDEN TESTS\n",
    "try:\n",
    "    if airports_df['city'].dtype != 'object':\n",
    "        raise ValueError('Airport city is wrong type, should be object (string)')\n",
    "    if airports_df['country'].dtype != 'object':\n",
    "        raise ValueError('Airport country is wrong type, should be object (string)')\n",
    "\n",
    "    if airports_df['iata'].dtype != 'object':\n",
    "        raise ValueError('Airport IATA is wrong type, should be object (string)')\n",
    "    if airports_df['lat'].dtype != 'float64':\n",
    "        raise ValueError('Airport latitude is wrong type, should be float')\n",
    "    if airports_df['lon'].dtype != 'float64':\n",
    "        raise ValueError('Airport longitude is wrong type, should be float')\n",
    "\n",
    "    pass\n",
    "except KeyError:\n",
    "    raise KeyError('You likely misspelled a column name or didn''t load the dataframe')\n",
    "    pass\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-876dda425972c08e",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Load airlines.dat.txt into a dataframe called airlines_df\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "with open('airlines.dat.txt') as airlines_file:\n",
    "    airlines_df = pd.read_csv(airlines_file, ',', None, None, ['airline_id',\\\n",
    "                                                            'airline_name',\\\n",
    "                                                            'airline_alias',\\\n",
    "                                                            'airline_iata' ,\\\n",
    "                                                            'airline_icao', \\\n",
    "                                                            'airline_callsign',\\\n",
    "                                                            'country',\\\n",
    "                                                            'active']);\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-959b7af182a128c7",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "airline_id           int64\n",
       "airline_name        object\n",
       "airline_alias       object\n",
       "airline_iata        object\n",
       "airline_icao        object\n",
       "airline_callsign    object\n",
       "country             object\n",
       "active              object\n",
       "dtype: object"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airlines_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-04a641a963dfcc99",
     "locked": true,
     "points": 0,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "if len(airlines_df) != 6048:\n",
    "    raise ValueError('Unexpected number of airlines rows')\n",
    "    \n",
    "if len(airlines_df.columns) != 8:\n",
    "    raise ValueError('Unexpected number of columns in airlines')\n",
    "    \n",
    "try:\n",
    "    if len(airlines_df['airline_id']) != 6048:\n",
    "        raise ValueError('Your DataFrame doesn''t have the expected number of rows')\n",
    "\n",
    "    if airlines_df['airline_id'].dtype != 'int64':\n",
    "        raise ValueError('Airline  ID is wrong type, should be integer')\n",
    "\n",
    "    if airlines_df['airline_name'].dtype != 'object':\n",
    "        raise ValueError('Airline name is wrong type, should be object (string)')\n",
    "except KeyError:\n",
    "    raise KeyError('You likely misspelled a column name or didn''t load the dataframe')\n",
    "    pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-s04a641a963dfcc99",
     "locked": true,
     "points": 2,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN HIDDEN TESTS\n",
    "try:\n",
    "    if airlines_df['country'].dtype != 'object':\n",
    "        raise ValueError('Airline country is wrong type, should be object (string)')\n",
    "    \n",
    "    if airlines_df['airline_iata'].dtype != 'object':\n",
    "        raise ValueError('Airline IATA is wrong type, should be object (string)')\n",
    "    if airlines_df['airline_icao'].dtype != 'object':\n",
    "        raise ValueError('Airline ICAO is wrong type, should be object (string)')\n",
    "\n",
    "    pass\n",
    "except KeyError:\n",
    "    raise KeyError('You likely misspelled a column name or didn''t load the dataframe')\n",
    "    pass\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-a6ec3b592f8be1cd",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Load routes.dat.txt into a dataframe called routes_df\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "with open('routes.dat.txt') as routes_file:\n",
    "    routes_df = pd.read_csv(routes_file, ',', None, None, ['airline_iata',\\\n",
    "                                                        'airline_id',\\\n",
    "                                                        'src_iata_icao',\\\n",
    "                                                        'source_id',\\\n",
    "                                                        'target_iata_icao', \\\n",
    "                                                        'target_id',\\\n",
    "                                                        'code_share',\\\n",
    "                                                        'stops',\\\n",
    "                                                        'equipment']);\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-df1ed351adfe619a",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "airline_iata        object\n",
       "airline_id          object\n",
       "src_iata_icao       object\n",
       "source_id           object\n",
       "target_iata_icao    object\n",
       "target_id           object\n",
       "code_share          object\n",
       "stops                int64\n",
       "equipment           object\n",
       "dtype: object"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "routes_df.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-ed7d70b2adbc2a04",
     "locked": true,
     "points": 2,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "if len(routes_df) != 67663:\n",
    "    raise ValueError('Unexpected number of routes')\n",
    "    \n",
    "if len(routes_df.columns) != 9:\n",
    "    raise ValueError('Unexpected number of route columns')\n",
    "    \n",
    "if 'target_iata_icao' not in routes_df.columns:\n",
    "    raise KeyError('Missing expected target_iata_iaco field from routes')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-3f353e6e029628c5",
     "locked": true,
     "points": 0,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN HIDDEN TESTS\n",
    "try:\n",
    "    if routes_df['airline_iata'].dtype != 'object':\n",
    "        raise ValueError('Airline IATA is wrong type, should be object (string)')\n",
    "    if routes_df['source_id'].dtype != 'object':\n",
    "        raise ValueError('Airline source ID is wrong type, should be object (string)')\n",
    "\n",
    "    pass\n",
    "except KeyError:\n",
    "    raise KeyError('You likely misspelled a column name or didn''t load the dataframe')\n",
    "    pass\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-31acbae4b6a05f56",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "For the last dataframe, `flights_df`, you are importing from a CSV with a header.  For now, have Python use the header names already in the file. When calling read_csv, use the option use_cols to specify a list of columns to import.  Only include the following fields (these were named in the CSV file header from BTS, and thus don’t follow Python naming conventions): ['YEAR',MONTH','DAY_OF_MONTH','CARRIER','FL_NUM','ORIGIN','DEST','ARR_DELAY_NEW','CANCELLED']\n",
    "\n",
    "The data is at: https://docs.google.com/uc?export=download&id=1PPtjGx8lr_cDUfVa3qwlk1W8yY6hY91n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-c82b156b3e1a5ec5",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Import https://docs.google.com/uc?export=download&id=1PPtjGx8lr_cDUfVa3qwlk1W8yY6hY91n into flights_df, but\n",
    "# also restrict to the following columns: 'YEAR','MONTH','DAY_OF_MONTH','CARRIER',\n",
    "# 'FL_NUM','ORIGIN','DEST','ARR_DELAY_NEW','CANCELLED'\n",
    "\n",
    "import requests\n",
    "from io import StringIO\n",
    "\n",
    "remote = requests.get('https://docs.google.com/uc?export=download&id=1PPtjGx8lr_cDUfVa3qwlk1W8yY6hY91n').content\n",
    "\n",
    "# You can read from the remote file via:\n",
    "# flights = pd.read_csv(StringIO(remote.decode('utf-8')))\n",
    "#\n",
    "# But you also need to use particular columns as per the HW spec\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "flights_df = pd.read_csv(StringIO(remote.decode('utf-8')),\\\n",
    "                      usecols=['YEAR','MONTH','DAY_OF_MONTH',\\\n",
    "                               'CARRIER',\\\n",
    "                               'FL_NUM','ORIGIN',\\\n",
    "                               'DEST','ARR_DELAY_NEW',\\\n",
    "                               'CANCELLED'])\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-8f26b8c7123ee967",
     "locked": true,
     "points": 0,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "if len(flights_df) != 570118:\n",
    "    raise ValueError('Expected a different number of flights')\n",
    "    \n",
    "if len(flights_df.columns) != 9:\n",
    "    raise ValueError('Perhaps you forgot to remove a column? Number of columns isn''t as expected')\n",
    "    \n",
    "if 'YEAR' not in flights_df.columns:\n",
    "    raise KeyError('Expected to find YEAR in the DataFrame')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-91fad97327bedd80",
     "locked": true,
     "points": 3,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN HIDDEN TESTS\n",
    "if 'FL_NUM' not in flights_df.columns:\n",
    "    raise KeyError('Expected to find FL_NUM in the DataFrame')\n",
    "    \n",
    "if flights_df['ARR_DELAY_NEW'].dtype != 'float64':\n",
    "    raise ValueError('Expected arrival delay ARR_DELAY_NEW to be floating point')\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-21c0049f7e25618a",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "## Notes on the Data So Far\n",
    "\n",
    "The data you've imported isn't yet perfect....\n",
    "\n",
    "**Nulls**.  You should see for airlines a variety of entries that say “NaN” (not a number), which represents “unknown” or null information.  In fact, if you look closely there are also other values representing “unknown” such as “\\N” and even “-”.  We’ll have to regularize all of this later!\n",
    "\n",
    "**Schemas**.  OK, you’ve loaded the DataFrames.  You can get the schemas -- the names and types of the columns -- of the DataFrames by the `dtypes` property.  Use `airlines_df.dtypes` and `routes_df.dtypes` to take a look at the schemas.  Now compare the types of `routes_df.airline_id` and `airlines_df.airline_id`.  You should see that one is `int64` and the other is `object`.\n",
    "\n",
    "Why is this?  Python automatically infers the types based on what it reads from the CSV files.  Unfortunately, things like “NaN” are actually floating-point (fractional) numbers and “\\N” is a string.  If a column has multiple kinds of values, Python will consider it to be an “object.”  Unfortunately, this will interfere with how we combine tables later, so we need to “clean” the data.  We'll come back to this later in Homework 1, Part I.  Before that we'll let you take a look at the data to see the issues, and then we'll import even more data (text data this time!).\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-3f69f44b3ba0bc67",
     "locked": false,
     "points": 0,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "## A work cell for you to do as you wish"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-898d68b2f0b9d1a0",
     "locked": false,
     "points": 0,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "## A work cell for you to do as you wish"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-531164ff0ff4d6a6",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "### 1.1 Final Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-ed39b9065659a302",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>airport_id</th>\n",
       "      <th>airport_name</th>\n",
       "      <th>city</th>\n",
       "      <th>country</th>\n",
       "      <th>iata</th>\n",
       "      <th>icao</th>\n",
       "      <th>lat</th>\n",
       "      <th>lon</th>\n",
       "      <th>alt</th>\n",
       "      <th>timezone</th>\n",
       "      <th>dst</th>\n",
       "      <th>tz</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Goroka</td>\n",
       "      <td>Goroka</td>\n",
       "      <td>Papua New Guinea</td>\n",
       "      <td>GKA</td>\n",
       "      <td>AYGA</td>\n",
       "      <td>-6.081689</td>\n",
       "      <td>145.391881</td>\n",
       "      <td>5282</td>\n",
       "      <td>10.0</td>\n",
       "      <td>U</td>\n",
       "      <td>Pacific/Port_Moresby</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Madang</td>\n",
       "      <td>Madang</td>\n",
       "      <td>Papua New Guinea</td>\n",
       "      <td>MAG</td>\n",
       "      <td>AYMD</td>\n",
       "      <td>-5.207083</td>\n",
       "      <td>145.788700</td>\n",
       "      <td>20</td>\n",
       "      <td>10.0</td>\n",
       "      <td>U</td>\n",
       "      <td>Pacific/Port_Moresby</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Mount Hagen</td>\n",
       "      <td>Mount Hagen</td>\n",
       "      <td>Papua New Guinea</td>\n",
       "      <td>HGU</td>\n",
       "      <td>AYMH</td>\n",
       "      <td>-5.826789</td>\n",
       "      <td>144.295861</td>\n",
       "      <td>5388</td>\n",
       "      <td>10.0</td>\n",
       "      <td>U</td>\n",
       "      <td>Pacific/Port_Moresby</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Nadzab</td>\n",
       "      <td>Nadzab</td>\n",
       "      <td>Papua New Guinea</td>\n",
       "      <td>LAE</td>\n",
       "      <td>AYNZ</td>\n",
       "      <td>-6.569828</td>\n",
       "      <td>146.726242</td>\n",
       "      <td>239</td>\n",
       "      <td>10.0</td>\n",
       "      <td>U</td>\n",
       "      <td>Pacific/Port_Moresby</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Port Moresby Jacksons Intl</td>\n",
       "      <td>Port Moresby</td>\n",
       "      <td>Papua New Guinea</td>\n",
       "      <td>POM</td>\n",
       "      <td>AYPY</td>\n",
       "      <td>-9.443383</td>\n",
       "      <td>147.220050</td>\n",
       "      <td>146</td>\n",
       "      <td>10.0</td>\n",
       "      <td>U</td>\n",
       "      <td>Pacific/Port_Moresby</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Wewak Intl</td>\n",
       "      <td>Wewak</td>\n",
       "      <td>Papua New Guinea</td>\n",
       "      <td>WWK</td>\n",
       "      <td>AYWK</td>\n",
       "      <td>-3.583828</td>\n",
       "      <td>143.669186</td>\n",
       "      <td>19</td>\n",
       "      <td>10.0</td>\n",
       "      <td>U</td>\n",
       "      <td>Pacific/Port_Moresby</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Narsarsuaq</td>\n",
       "      <td>Narssarssuaq</td>\n",
       "      <td>Greenland</td>\n",
       "      <td>UAK</td>\n",
       "      <td>BGBW</td>\n",
       "      <td>61.160517</td>\n",
       "      <td>-45.425978</td>\n",
       "      <td>112</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>E</td>\n",
       "      <td>America/Godthab</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>Nuuk</td>\n",
       "      <td>Godthaab</td>\n",
       "      <td>Greenland</td>\n",
       "      <td>GOH</td>\n",
       "      <td>BGGH</td>\n",
       "      <td>64.190922</td>\n",
       "      <td>-51.678064</td>\n",
       "      <td>283</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>E</td>\n",
       "      <td>America/Godthab</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>Sondre Stromfjord</td>\n",
       "      <td>Sondrestrom</td>\n",
       "      <td>Greenland</td>\n",
       "      <td>SFJ</td>\n",
       "      <td>BGSF</td>\n",
       "      <td>67.016969</td>\n",
       "      <td>-50.689325</td>\n",
       "      <td>165</td>\n",
       "      <td>-3.0</td>\n",
       "      <td>E</td>\n",
       "      <td>America/Godthab</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>Thule Air Base</td>\n",
       "      <td>Thule</td>\n",
       "      <td>Greenland</td>\n",
       "      <td>THU</td>\n",
       "      <td>BGTL</td>\n",
       "      <td>76.531203</td>\n",
       "      <td>-68.703161</td>\n",
       "      <td>251</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>E</td>\n",
       "      <td>America/Thule</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>Akureyri</td>\n",
       "      <td>Akureyri</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>AEY</td>\n",
       "      <td>BIAR</td>\n",
       "      <td>65.659994</td>\n",
       "      <td>-18.072703</td>\n",
       "      <td>6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Atlantic/Reykjavik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>Egilsstadir</td>\n",
       "      <td>Egilsstadir</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>EGS</td>\n",
       "      <td>BIEG</td>\n",
       "      <td>65.283333</td>\n",
       "      <td>-14.401389</td>\n",
       "      <td>76</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Atlantic/Reykjavik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>Hornafjordur</td>\n",
       "      <td>Hofn</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>HFN</td>\n",
       "      <td>BIHN</td>\n",
       "      <td>64.295556</td>\n",
       "      <td>-15.227222</td>\n",
       "      <td>24</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Atlantic/Reykjavik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>Husavik</td>\n",
       "      <td>Husavik</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>HZK</td>\n",
       "      <td>BIHU</td>\n",
       "      <td>65.952328</td>\n",
       "      <td>-17.425978</td>\n",
       "      <td>48</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Atlantic/Reykjavik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>Isafjordur</td>\n",
       "      <td>Isafjordur</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>IFJ</td>\n",
       "      <td>BIIS</td>\n",
       "      <td>66.058056</td>\n",
       "      <td>-23.135278</td>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Atlantic/Reykjavik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>Keflavik International Airport</td>\n",
       "      <td>Keflavik</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>KEF</td>\n",
       "      <td>BIKF</td>\n",
       "      <td>63.985000</td>\n",
       "      <td>-22.605556</td>\n",
       "      <td>171</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Atlantic/Reykjavik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>Patreksfjordur</td>\n",
       "      <td>Patreksfjordur</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>PFJ</td>\n",
       "      <td>BIPA</td>\n",
       "      <td>65.555833</td>\n",
       "      <td>-23.965000</td>\n",
       "      <td>11</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Atlantic/Reykjavik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>Reykjavik</td>\n",
       "      <td>Reykjavik</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>RKV</td>\n",
       "      <td>BIRK</td>\n",
       "      <td>64.130000</td>\n",
       "      <td>-21.940556</td>\n",
       "      <td>48</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Atlantic/Reykjavik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>Siglufjordur</td>\n",
       "      <td>Siglufjordur</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>SIJ</td>\n",
       "      <td>BISI</td>\n",
       "      <td>66.133333</td>\n",
       "      <td>-18.916667</td>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Atlantic/Reykjavik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>Vestmannaeyjar</td>\n",
       "      <td>Vestmannaeyjar</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>VEY</td>\n",
       "      <td>BIVM</td>\n",
       "      <td>63.424303</td>\n",
       "      <td>-20.278875</td>\n",
       "      <td>326</td>\n",
       "      <td>0.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Atlantic/Reykjavik</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>Sault Ste Marie</td>\n",
       "      <td>Sault Sainte Marie</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YAM</td>\n",
       "      <td>CYAM</td>\n",
       "      <td>46.485001</td>\n",
       "      <td>-84.509445</td>\n",
       "      <td>630</td>\n",
       "      <td>-5.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Toronto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>Winnipeg St Andrews</td>\n",
       "      <td>Winnipeg</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YAV</td>\n",
       "      <td>CYAV</td>\n",
       "      <td>50.056389</td>\n",
       "      <td>-97.032500</td>\n",
       "      <td>760</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Winnipeg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>Shearwater</td>\n",
       "      <td>Halifax</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YAW</td>\n",
       "      <td>CYAW</td>\n",
       "      <td>44.639721</td>\n",
       "      <td>-63.499444</td>\n",
       "      <td>167</td>\n",
       "      <td>-4.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Halifax</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>St Anthony</td>\n",
       "      <td>St. Anthony</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YAY</td>\n",
       "      <td>CYAY</td>\n",
       "      <td>51.391944</td>\n",
       "      <td>-56.083056</td>\n",
       "      <td>108</td>\n",
       "      <td>-3.5</td>\n",
       "      <td>A</td>\n",
       "      <td>America/St_Johns</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>Tofino</td>\n",
       "      <td>Tofino</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YAZ</td>\n",
       "      <td>CYAZ</td>\n",
       "      <td>49.082222</td>\n",
       "      <td>-125.772500</td>\n",
       "      <td>80</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Vancouver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>Kugaaruk</td>\n",
       "      <td>Pelly Bay</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YBB</td>\n",
       "      <td>CYBB</td>\n",
       "      <td>68.534444</td>\n",
       "      <td>-89.808056</td>\n",
       "      <td>56</td>\n",
       "      <td>-7.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Edmonton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>Baie Comeau</td>\n",
       "      <td>Baie Comeau</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YBC</td>\n",
       "      <td>CYBC</td>\n",
       "      <td>49.132500</td>\n",
       "      <td>-68.204444</td>\n",
       "      <td>71</td>\n",
       "      <td>-5.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Toronto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>Bagotville</td>\n",
       "      <td>Bagotville</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YBG</td>\n",
       "      <td>CYBG</td>\n",
       "      <td>48.330555</td>\n",
       "      <td>-70.996391</td>\n",
       "      <td>522</td>\n",
       "      <td>-5.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Toronto</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>Baker Lake</td>\n",
       "      <td>Baker Lake</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YBK</td>\n",
       "      <td>CYBK</td>\n",
       "      <td>64.298889</td>\n",
       "      <td>-96.077778</td>\n",
       "      <td>59</td>\n",
       "      <td>-6.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Winnipeg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>Campbell River</td>\n",
       "      <td>Campbell River</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YBL</td>\n",
       "      <td>CYBL</td>\n",
       "      <td>49.950832</td>\n",
       "      <td>-125.270833</td>\n",
       "      <td>346</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Vancouver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8077</th>\n",
       "      <td>9512</td>\n",
       "      <td>Port of Seattle</td>\n",
       "      <td>Seattle</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PSEA</td>\n",
       "      <td>47.609178</td>\n",
       "      <td>-122.350605</td>\n",
       "      <td>0</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Los_Angeles</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8078</th>\n",
       "      <td>9513</td>\n",
       "      <td>Ferry Terminal</td>\n",
       "      <td>Whittier</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WHIT</td>\n",
       "      <td>60.776566</td>\n",
       "      <td>-148.683367</td>\n",
       "      <td>0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Anchorage</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8079</th>\n",
       "      <td>9514</td>\n",
       "      <td>Ferry Terminal</td>\n",
       "      <td>Valdez</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>VLDZ</td>\n",
       "      <td>61.123976</td>\n",
       "      <td>-146.365309</td>\n",
       "      <td>0</td>\n",
       "      <td>-9.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Anchorage</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8080</th>\n",
       "      <td>9515</td>\n",
       "      <td>Gare Routiere</td>\n",
       "      <td>Saint-Louis</td>\n",
       "      <td>Reunion</td>\n",
       "      <td>NaN</td>\n",
       "      <td>STLS</td>\n",
       "      <td>-21.289604</td>\n",
       "      <td>55.407269</td>\n",
       "      <td>103</td>\n",
       "      <td>4.0</td>\n",
       "      <td>E</td>\n",
       "      <td>Indian/Reunion</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8081</th>\n",
       "      <td>9516</td>\n",
       "      <td>Bus Stop</td>\n",
       "      <td>La Riviere</td>\n",
       "      <td>Reunion</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LRIV</td>\n",
       "      <td>-21.272574</td>\n",
       "      <td>55.437706</td>\n",
       "      <td>190</td>\n",
       "      <td>4.0</td>\n",
       "      <td>E</td>\n",
       "      <td>Indian/Reunion</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8082</th>\n",
       "      <td>9517</td>\n",
       "      <td>Bus Stop</td>\n",
       "      <td>Cilaos</td>\n",
       "      <td>Reunion</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CILS</td>\n",
       "      <td>-21.135518</td>\n",
       "      <td>55.472087</td>\n",
       "      <td>4000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>E</td>\n",
       "      <td>Indian/Reunion</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8083</th>\n",
       "      <td>9518</td>\n",
       "      <td>Bus Stop</td>\n",
       "      <td>Hell-Bourg</td>\n",
       "      <td>Reunion</td>\n",
       "      <td>NaN</td>\n",
       "      <td>HLBG</td>\n",
       "      <td>-21.064020</td>\n",
       "      <td>55.518453</td>\n",
       "      <td>3000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>E</td>\n",
       "      <td>Indian/Reunion</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8084</th>\n",
       "      <td>9519</td>\n",
       "      <td>Bus Stop</td>\n",
       "      <td>Salazie</td>\n",
       "      <td>Reunion</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SLZI</td>\n",
       "      <td>-21.027485</td>\n",
       "      <td>55.538955</td>\n",
       "      <td>3000</td>\n",
       "      <td>4.0</td>\n",
       "      <td>E</td>\n",
       "      <td>Indian/Reunion</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8085</th>\n",
       "      <td>9520</td>\n",
       "      <td>Gare</td>\n",
       "      <td>St Andre</td>\n",
       "      <td>Reunion</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ANDR</td>\n",
       "      <td>-20.963272</td>\n",
       "      <td>55.652508</td>\n",
       "      <td>100</td>\n",
       "      <td>4.0</td>\n",
       "      <td>E</td>\n",
       "      <td>Indian/Reunion</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8086</th>\n",
       "      <td>9521</td>\n",
       "      <td>L'Ocean Bus Terminal</td>\n",
       "      <td>Saint Denis</td>\n",
       "      <td>Reunion</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SDNS</td>\n",
       "      <td>-20.877683</td>\n",
       "      <td>55.457393</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>E</td>\n",
       "      <td>Indian/Reunion</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8087</th>\n",
       "      <td>9522</td>\n",
       "      <td>Gare Routiere</td>\n",
       "      <td>Saint Pierre</td>\n",
       "      <td>Reunion</td>\n",
       "      <td>NaN</td>\n",
       "      <td>STPR</td>\n",
       "      <td>-21.334240</td>\n",
       "      <td>55.471331</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>E</td>\n",
       "      <td>Indian/Reunion</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8088</th>\n",
       "      <td>9523</td>\n",
       "      <td>Baie Ste Anne</td>\n",
       "      <td>Praslin</td>\n",
       "      <td>Seychelles</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PLIN</td>\n",
       "      <td>-4.347119</td>\n",
       "      <td>55.765688</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Indian/Mahe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8089</th>\n",
       "      <td>9524</td>\n",
       "      <td>La Passe</td>\n",
       "      <td>La Digue</td>\n",
       "      <td>Seychelles</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LADG</td>\n",
       "      <td>-4.347969</td>\n",
       "      <td>55.829069</td>\n",
       "      <td>0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Indian/Mahe</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8090</th>\n",
       "      <td>9525</td>\n",
       "      <td>Ferry Dock</td>\n",
       "      <td>Bainbridge Island</td>\n",
       "      <td>United States</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BAIN</td>\n",
       "      <td>47.622237</td>\n",
       "      <td>-122.509362</td>\n",
       "      <td>0</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Los_Angeles</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8091</th>\n",
       "      <td>9526</td>\n",
       "      <td>Bus</td>\n",
       "      <td>Phnom Penh</td>\n",
       "      <td>Cambodia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PNMP</td>\n",
       "      <td>11.561716</td>\n",
       "      <td>104.914276</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Asia/Phnom_Penh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8092</th>\n",
       "      <td>9527</td>\n",
       "      <td>Bus</td>\n",
       "      <td>Siem Reap</td>\n",
       "      <td>Cambodia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SMRP</td>\n",
       "      <td>13.361002</td>\n",
       "      <td>103.859543</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Asia/Phnom_Penh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8093</th>\n",
       "      <td>9528</td>\n",
       "      <td>Bus</td>\n",
       "      <td>Sihanoukville</td>\n",
       "      <td>Cambodia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SNKV</td>\n",
       "      <td>10.607220</td>\n",
       "      <td>103.524886</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Asia/Phnom_Penh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8094</th>\n",
       "      <td>9529</td>\n",
       "      <td>Bus</td>\n",
       "      <td>Kampot</td>\n",
       "      <td>Cambodia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KMPT</td>\n",
       "      <td>10.614922</td>\n",
       "      <td>104.177724</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Asia/Phnom_Penh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8095</th>\n",
       "      <td>9530</td>\n",
       "      <td>Bus</td>\n",
       "      <td>Kep</td>\n",
       "      <td>Cambodia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>KEPC</td>\n",
       "      <td>10.480174</td>\n",
       "      <td>104.294228</td>\n",
       "      <td>0</td>\n",
       "      <td>7.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Asia/Phnom_Penh</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8096</th>\n",
       "      <td>9531</td>\n",
       "      <td>Main Station</td>\n",
       "      <td>Taipei</td>\n",
       "      <td>Taiwan</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TPEI</td>\n",
       "      <td>25.046176</td>\n",
       "      <td>121.517532</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0</td>\n",
       "      <td>N</td>\n",
       "      <td>Asia/Taipei</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8097</th>\n",
       "      <td>9532</td>\n",
       "      <td>Prominent Hill</td>\n",
       "      <td>Prominent Hill</td>\n",
       "      <td>Australia</td>\n",
       "      <td>PXH</td>\n",
       "      <td>YPMH</td>\n",
       "      <td>-29.716667</td>\n",
       "      <td>135.521667</td>\n",
       "      <td>734</td>\n",
       "      <td>9.5</td>\n",
       "      <td>O</td>\n",
       "      <td>Australia/Adelaide</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8098</th>\n",
       "      <td>9533</td>\n",
       "      <td>Chatsworth Station</td>\n",
       "      <td>Chatsworth</td>\n",
       "      <td>United States</td>\n",
       "      <td>CWT</td>\n",
       "      <td>\\N</td>\n",
       "      <td>34.256944</td>\n",
       "      <td>-118.598889</td>\n",
       "      <td>978</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Los_Angeles</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8099</th>\n",
       "      <td>9534</td>\n",
       "      <td>Algerciras Port</td>\n",
       "      <td>Algerciras</td>\n",
       "      <td>Spain</td>\n",
       "      <td>NaN</td>\n",
       "      <td>\\N</td>\n",
       "      <td>36.136000</td>\n",
       "      <td>-5.435000</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>E</td>\n",
       "      <td>Europe/Madrid</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8100</th>\n",
       "      <td>9535</td>\n",
       "      <td>Ganges Water Aerodrome</td>\n",
       "      <td>Ganges</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YGG</td>\n",
       "      <td>\\N</td>\n",
       "      <td>48.850000</td>\n",
       "      <td>-123.500000</td>\n",
       "      <td>0</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Vancouver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8101</th>\n",
       "      <td>9536</td>\n",
       "      <td>Pender Harbour Water Aerodrome</td>\n",
       "      <td>Pender Harbour</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YPT</td>\n",
       "      <td>\\N</td>\n",
       "      <td>49.616667</td>\n",
       "      <td>-124.016667</td>\n",
       "      <td>0</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Vancouver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8102</th>\n",
       "      <td>9537</td>\n",
       "      <td>Mansons Landing Water Aerodrome</td>\n",
       "      <td>Mansons Landing</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YMU</td>\n",
       "      <td>\\N</td>\n",
       "      <td>50.066667</td>\n",
       "      <td>-124.983333</td>\n",
       "      <td>0</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Vancouver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8103</th>\n",
       "      <td>9538</td>\n",
       "      <td>Port McNeill Airport</td>\n",
       "      <td>Port McNeill</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YMP</td>\n",
       "      <td>\\N</td>\n",
       "      <td>50.575556</td>\n",
       "      <td>-127.028611</td>\n",
       "      <td>225</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Vancouver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8104</th>\n",
       "      <td>9539</td>\n",
       "      <td>Sullivan Bay Water Aerodrome</td>\n",
       "      <td>Sullivan Bay</td>\n",
       "      <td>Canada</td>\n",
       "      <td>YTG</td>\n",
       "      <td>\\N</td>\n",
       "      <td>50.883333</td>\n",
       "      <td>-126.833333</td>\n",
       "      <td>0</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Vancouver</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8105</th>\n",
       "      <td>9540</td>\n",
       "      <td>Deer Harbor Seaplane</td>\n",
       "      <td>Deer Harbor</td>\n",
       "      <td>United States</td>\n",
       "      <td>DHB</td>\n",
       "      <td>\\N</td>\n",
       "      <td>48.618397</td>\n",
       "      <td>-123.005960</td>\n",
       "      <td>0</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Los_Angeles</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8106</th>\n",
       "      <td>9541</td>\n",
       "      <td>San Diego Old Town Transit Center</td>\n",
       "      <td>San Diego</td>\n",
       "      <td>United States</td>\n",
       "      <td>OLT</td>\n",
       "      <td>\\N</td>\n",
       "      <td>32.755200</td>\n",
       "      <td>-117.199500</td>\n",
       "      <td>0</td>\n",
       "      <td>-8.0</td>\n",
       "      <td>A</td>\n",
       "      <td>America/Los_Angeles</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>8107 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      airport_id                       airport_name                city  \\\n",
       "0              1                             Goroka              Goroka   \n",
       "1              2                             Madang              Madang   \n",
       "2              3                        Mount Hagen         Mount Hagen   \n",
       "3              4                             Nadzab              Nadzab   \n",
       "4              5         Port Moresby Jacksons Intl        Port Moresby   \n",
       "5              6                         Wewak Intl               Wewak   \n",
       "6              7                         Narsarsuaq        Narssarssuaq   \n",
       "7              8                               Nuuk            Godthaab   \n",
       "8              9                  Sondre Stromfjord         Sondrestrom   \n",
       "9             10                     Thule Air Base               Thule   \n",
       "10            11                           Akureyri            Akureyri   \n",
       "11            12                        Egilsstadir         Egilsstadir   \n",
       "12            13                       Hornafjordur                Hofn   \n",
       "13            14                            Husavik             Husavik   \n",
       "14            15                         Isafjordur          Isafjordur   \n",
       "15            16     Keflavik International Airport            Keflavik   \n",
       "16            17                     Patreksfjordur      Patreksfjordur   \n",
       "17            18                          Reykjavik           Reykjavik   \n",
       "18            19                       Siglufjordur        Siglufjordur   \n",
       "19            20                     Vestmannaeyjar      Vestmannaeyjar   \n",
       "20            21                    Sault Ste Marie  Sault Sainte Marie   \n",
       "21            22                Winnipeg St Andrews            Winnipeg   \n",
       "22            23                         Shearwater             Halifax   \n",
       "23            24                         St Anthony         St. Anthony   \n",
       "24            25                             Tofino              Tofino   \n",
       "25            26                           Kugaaruk           Pelly Bay   \n",
       "26            27                        Baie Comeau         Baie Comeau   \n",
       "27            28                         Bagotville          Bagotville   \n",
       "28            29                         Baker Lake          Baker Lake   \n",
       "29            30                     Campbell River      Campbell River   \n",
       "...          ...                                ...                 ...   \n",
       "8077        9512                    Port of Seattle             Seattle   \n",
       "8078        9513                     Ferry Terminal            Whittier   \n",
       "8079        9514                     Ferry Terminal              Valdez   \n",
       "8080        9515                      Gare Routiere         Saint-Louis   \n",
       "8081        9516                           Bus Stop          La Riviere   \n",
       "8082        9517                           Bus Stop              Cilaos   \n",
       "8083        9518                           Bus Stop          Hell-Bourg   \n",
       "8084        9519                           Bus Stop             Salazie   \n",
       "8085        9520                               Gare            St Andre   \n",
       "8086        9521               L'Ocean Bus Terminal         Saint Denis   \n",
       "8087        9522                      Gare Routiere        Saint Pierre   \n",
       "8088        9523                      Baie Ste Anne             Praslin   \n",
       "8089        9524                           La Passe            La Digue   \n",
       "8090        9525                         Ferry Dock   Bainbridge Island   \n",
       "8091        9526                                Bus          Phnom Penh   \n",
       "8092        9527                                Bus           Siem Reap   \n",
       "8093        9528                                Bus       Sihanoukville   \n",
       "8094        9529                                Bus              Kampot   \n",
       "8095        9530                                Bus                 Kep   \n",
       "8096        9531                       Main Station              Taipei   \n",
       "8097        9532                     Prominent Hill      Prominent Hill   \n",
       "8098        9533                 Chatsworth Station          Chatsworth   \n",
       "8099        9534                    Algerciras Port          Algerciras   \n",
       "8100        9535             Ganges Water Aerodrome              Ganges   \n",
       "8101        9536     Pender Harbour Water Aerodrome      Pender Harbour   \n",
       "8102        9537    Mansons Landing Water Aerodrome     Mansons Landing   \n",
       "8103        9538               Port McNeill Airport        Port McNeill   \n",
       "8104        9539       Sullivan Bay Water Aerodrome        Sullivan Bay   \n",
       "8105        9540               Deer Harbor Seaplane         Deer Harbor   \n",
       "8106        9541  San Diego Old Town Transit Center           San Diego   \n",
       "\n",
       "               country iata  icao        lat         lon   alt  timezone dst  \\\n",
       "0     Papua New Guinea  GKA  AYGA  -6.081689  145.391881  5282      10.0   U   \n",
       "1     Papua New Guinea  MAG  AYMD  -5.207083  145.788700    20      10.0   U   \n",
       "2     Papua New Guinea  HGU  AYMH  -5.826789  144.295861  5388      10.0   U   \n",
       "3     Papua New Guinea  LAE  AYNZ  -6.569828  146.726242   239      10.0   U   \n",
       "4     Papua New Guinea  POM  AYPY  -9.443383  147.220050   146      10.0   U   \n",
       "5     Papua New Guinea  WWK  AYWK  -3.583828  143.669186    19      10.0   U   \n",
       "6            Greenland  UAK  BGBW  61.160517  -45.425978   112      -3.0   E   \n",
       "7            Greenland  GOH  BGGH  64.190922  -51.678064   283      -3.0   E   \n",
       "8            Greenland  SFJ  BGSF  67.016969  -50.689325   165      -3.0   E   \n",
       "9            Greenland  THU  BGTL  76.531203  -68.703161   251      -4.0   E   \n",
       "10             Iceland  AEY  BIAR  65.659994  -18.072703     6       0.0   N   \n",
       "11             Iceland  EGS  BIEG  65.283333  -14.401389    76       0.0   N   \n",
       "12             Iceland  HFN  BIHN  64.295556  -15.227222    24       0.0   N   \n",
       "13             Iceland  HZK  BIHU  65.952328  -17.425978    48       0.0   N   \n",
       "14             Iceland  IFJ  BIIS  66.058056  -23.135278     8       0.0   N   \n",
       "15             Iceland  KEF  BIKF  63.985000  -22.605556   171       0.0   N   \n",
       "16             Iceland  PFJ  BIPA  65.555833  -23.965000    11       0.0   N   \n",
       "17             Iceland  RKV  BIRK  64.130000  -21.940556    48       0.0   N   \n",
       "18             Iceland  SIJ  BISI  66.133333  -18.916667    10       0.0   N   \n",
       "19             Iceland  VEY  BIVM  63.424303  -20.278875   326       0.0   N   \n",
       "20              Canada  YAM  CYAM  46.485001  -84.509445   630      -5.0   A   \n",
       "21              Canada  YAV  CYAV  50.056389  -97.032500   760      -6.0   A   \n",
       "22              Canada  YAW  CYAW  44.639721  -63.499444   167      -4.0   A   \n",
       "23              Canada  YAY  CYAY  51.391944  -56.083056   108      -3.5   A   \n",
       "24              Canada  YAZ  CYAZ  49.082222 -125.772500    80      -8.0   A   \n",
       "25              Canada  YBB  CYBB  68.534444  -89.808056    56      -7.0   A   \n",
       "26              Canada  YBC  CYBC  49.132500  -68.204444    71      -5.0   A   \n",
       "27              Canada  YBG  CYBG  48.330555  -70.996391   522      -5.0   A   \n",
       "28              Canada  YBK  CYBK  64.298889  -96.077778    59      -6.0   A   \n",
       "29              Canada  YBL  CYBL  49.950832 -125.270833   346      -8.0   A   \n",
       "...                ...  ...   ...        ...         ...   ...       ...  ..   \n",
       "8077     United States  NaN  PSEA  47.609178 -122.350605     0      -8.0   A   \n",
       "8078     United States  NaN  WHIT  60.776566 -148.683367     0      -9.0   A   \n",
       "8079     United States  NaN  VLDZ  61.123976 -146.365309     0      -9.0   A   \n",
       "8080           Reunion  NaN  STLS -21.289604   55.407269   103       4.0   E   \n",
       "8081           Reunion  NaN  LRIV -21.272574   55.437706   190       4.0   E   \n",
       "8082           Reunion  NaN  CILS -21.135518   55.472087  4000       4.0   E   \n",
       "8083           Reunion  NaN  HLBG -21.064020   55.518453  3000       4.0   E   \n",
       "8084           Reunion  NaN  SLZI -21.027485   55.538955  3000       4.0   E   \n",
       "8085           Reunion  NaN  ANDR -20.963272   55.652508   100       4.0   E   \n",
       "8086           Reunion  NaN  SDNS -20.877683   55.457393     0       4.0   E   \n",
       "8087           Reunion  NaN  STPR -21.334240   55.471331     0       4.0   E   \n",
       "8088        Seychelles  NaN  PLIN  -4.347119   55.765688     0       4.0   N   \n",
       "8089        Seychelles  NaN  LADG  -4.347969   55.829069     0       4.0   N   \n",
       "8090     United States  NaN  BAIN  47.622237 -122.509362     0      -8.0   A   \n",
       "8091          Cambodia  NaN  PNMP  11.561716  104.914276     0       7.0   N   \n",
       "8092          Cambodia  NaN  SMRP  13.361002  103.859543     0       7.0   N   \n",
       "8093          Cambodia  NaN  SNKV  10.607220  103.524886     0       7.0   N   \n",
       "8094          Cambodia  NaN  KMPT  10.614922  104.177724     0       7.0   N   \n",
       "8095          Cambodia  NaN  KEPC  10.480174  104.294228     0       7.0   N   \n",
       "8096            Taiwan  NaN  TPEI  25.046176  121.517532     0       8.0   N   \n",
       "8097         Australia  PXH  YPMH -29.716667  135.521667   734       9.5   O   \n",
       "8098     United States  CWT    \\N  34.256944 -118.598889   978      -8.0   A   \n",
       "8099             Spain  NaN    \\N  36.136000   -5.435000     0       1.0   E   \n",
       "8100            Canada  YGG    \\N  48.850000 -123.500000     0      -8.0   A   \n",
       "8101            Canada  YPT    \\N  49.616667 -124.016667     0      -8.0   A   \n",
       "8102            Canada  YMU    \\N  50.066667 -124.983333     0      -8.0   A   \n",
       "8103            Canada  YMP    \\N  50.575556 -127.028611   225      -8.0   A   \n",
       "8104            Canada  YTG    \\N  50.883333 -126.833333     0      -8.0   A   \n",
       "8105     United States  DHB    \\N  48.618397 -123.005960     0      -8.0   A   \n",
       "8106     United States  OLT    \\N  32.755200 -117.199500     0      -8.0   A   \n",
       "\n",
       "                        tz  \n",
       "0     Pacific/Port_Moresby  \n",
       "1     Pacific/Port_Moresby  \n",
       "2     Pacific/Port_Moresby  \n",
       "3     Pacific/Port_Moresby  \n",
       "4     Pacific/Port_Moresby  \n",
       "5     Pacific/Port_Moresby  \n",
       "6          America/Godthab  \n",
       "7          America/Godthab  \n",
       "8          America/Godthab  \n",
       "9            America/Thule  \n",
       "10      Atlantic/Reykjavik  \n",
       "11      Atlantic/Reykjavik  \n",
       "12      Atlantic/Reykjavik  \n",
       "13      Atlantic/Reykjavik  \n",
       "14      Atlantic/Reykjavik  \n",
       "15      Atlantic/Reykjavik  \n",
       "16      Atlantic/Reykjavik  \n",
       "17      Atlantic/Reykjavik  \n",
       "18      Atlantic/Reykjavik  \n",
       "19      Atlantic/Reykjavik  \n",
       "20         America/Toronto  \n",
       "21        America/Winnipeg  \n",
       "22         America/Halifax  \n",
       "23        America/St_Johns  \n",
       "24       America/Vancouver  \n",
       "25        America/Edmonton  \n",
       "26         America/Toronto  \n",
       "27         America/Toronto  \n",
       "28        America/Winnipeg  \n",
       "29       America/Vancouver  \n",
       "...                    ...  \n",
       "8077   America/Los_Angeles  \n",
       "8078     America/Anchorage  \n",
       "8079     America/Anchorage  \n",
       "8080        Indian/Reunion  \n",
       "8081        Indian/Reunion  \n",
       "8082        Indian/Reunion  \n",
       "8083        Indian/Reunion  \n",
       "8084        Indian/Reunion  \n",
       "8085        Indian/Reunion  \n",
       "8086        Indian/Reunion  \n",
       "8087        Indian/Reunion  \n",
       "8088           Indian/Mahe  \n",
       "8089           Indian/Mahe  \n",
       "8090   America/Los_Angeles  \n",
       "8091       Asia/Phnom_Penh  \n",
       "8092       Asia/Phnom_Penh  \n",
       "8093       Asia/Phnom_Penh  \n",
       "8094       Asia/Phnom_Penh  \n",
       "8095       Asia/Phnom_Penh  \n",
       "8096           Asia/Taipei  \n",
       "8097    Australia/Adelaide  \n",
       "8098   America/Los_Angeles  \n",
       "8099         Europe/Madrid  \n",
       "8100     America/Vancouver  \n",
       "8101     America/Vancouver  \n",
       "8102     America/Vancouver  \n",
       "8103     America/Vancouver  \n",
       "8104     America/Vancouver  \n",
       "8105   America/Los_Angeles  \n",
       "8106   America/Los_Angeles  \n",
       "\n",
       "[8107 rows x 12 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airports_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-83e37b3e7751d6c2",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>airline_id</th>\n",
       "      <th>airline_name</th>\n",
       "      <th>airline_alias</th>\n",
       "      <th>airline_iata</th>\n",
       "      <th>airline_icao</th>\n",
       "      <th>airline_callsign</th>\n",
       "      <th>country</th>\n",
       "      <th>active</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Private flight</td>\n",
       "      <td>\\N</td>\n",
       "      <td>-</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>135 Airways</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GNL</td>\n",
       "      <td>GENERAL</td>\n",
       "      <td>United States</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1Time Airline</td>\n",
       "      <td>\\N</td>\n",
       "      <td>1T</td>\n",
       "      <td>RNX</td>\n",
       "      <td>NEXTIME</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2 Sqn No 1 Elementary Flying Training School</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WYT</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>213 Flight Unit</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TFU</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Russia</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>223 Flight Unit State Airline</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CHD</td>\n",
       "      <td>CHKALOVSK-AVIA</td>\n",
       "      <td>Russia</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>224th Flight Unit</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TTF</td>\n",
       "      <td>CARGO UNIT</td>\n",
       "      <td>Russia</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>247 Jet Ltd</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TWF</td>\n",
       "      <td>CLOUD RUNNER</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>3D Aviation</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SEC</td>\n",
       "      <td>SECUREX</td>\n",
       "      <td>United States</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>40-Mile Air</td>\n",
       "      <td>\\N</td>\n",
       "      <td>Q5</td>\n",
       "      <td>MLA</td>\n",
       "      <td>MILE-AIR</td>\n",
       "      <td>United States</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>4D Air</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>QRT</td>\n",
       "      <td>QUARTET</td>\n",
       "      <td>Thailand</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>611897 Alberta Limited</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>THD</td>\n",
       "      <td>DONUT</td>\n",
       "      <td>Canada</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>Ansett Australia</td>\n",
       "      <td>\\N</td>\n",
       "      <td>AN</td>\n",
       "      <td>AAA</td>\n",
       "      <td>ANSETT</td>\n",
       "      <td>Australia</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>Abacus International</td>\n",
       "      <td>\\N</td>\n",
       "      <td>1B</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Singapore</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>Abelag Aviation</td>\n",
       "      <td>\\N</td>\n",
       "      <td>W9</td>\n",
       "      <td>AAB</td>\n",
       "      <td>ABG</td>\n",
       "      <td>Belgium</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>Army Air Corps</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AAC</td>\n",
       "      <td>ARMYAIR</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>17</td>\n",
       "      <td>Aero Aviation Centre Ltd.</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AAD</td>\n",
       "      <td>SUNRISE</td>\n",
       "      <td>Canada</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>18</td>\n",
       "      <td>Aero Servicios Ejecutivos Internacionales</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>SII</td>\n",
       "      <td>ASEISA</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>Aero Biniza</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>BZS</td>\n",
       "      <td>BINIZA</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>20</td>\n",
       "      <td>Aero Albatros</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ABM</td>\n",
       "      <td>ALBATROS ESPANA</td>\n",
       "      <td>Spain</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>21</td>\n",
       "      <td>Aigle Azur</td>\n",
       "      <td>\\N</td>\n",
       "      <td>ZI</td>\n",
       "      <td>AAF</td>\n",
       "      <td>AIGLE AZUR</td>\n",
       "      <td>France</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>22</td>\n",
       "      <td>Aloha Airlines</td>\n",
       "      <td>\\N</td>\n",
       "      <td>AQ</td>\n",
       "      <td>AAH</td>\n",
       "      <td>ALOHA</td>\n",
       "      <td>United States</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>23</td>\n",
       "      <td>Alaska Island Air</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AAK</td>\n",
       "      <td>ALASKA ISLAND</td>\n",
       "      <td>United States</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>24</td>\n",
       "      <td>American Airlines</td>\n",
       "      <td>\\N</td>\n",
       "      <td>AA</td>\n",
       "      <td>AAL</td>\n",
       "      <td>AMERICAN</td>\n",
       "      <td>United States</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>25</td>\n",
       "      <td>Aviation Management Corporation</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AAM</td>\n",
       "      <td>AM CORP</td>\n",
       "      <td>United States</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>26</td>\n",
       "      <td>Atlantis Airlines (USA)</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AAO</td>\n",
       "      <td>ATLANTIS AIR</td>\n",
       "      <td>United States</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>27</td>\n",
       "      <td>Aerovista Airlines</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AAP</td>\n",
       "      <td>AEROVISTA GROUP</td>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>28</td>\n",
       "      <td>Asiana Airlines</td>\n",
       "      <td>\\N</td>\n",
       "      <td>OZ</td>\n",
       "      <td>AAR</td>\n",
       "      <td>ASIANA</td>\n",
       "      <td>Republic of Korea</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>29</td>\n",
       "      <td>Askari Aviation</td>\n",
       "      <td>\\N</td>\n",
       "      <td>4K</td>\n",
       "      <td>AAS</td>\n",
       "      <td>AL-AAS</td>\n",
       "      <td>Pakistan</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>30</td>\n",
       "      <td>Australia Asia Airlines</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>AAU</td>\n",
       "      <td>AUSTASIA</td>\n",
       "      <td>Australia</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6018</th>\n",
       "      <td>19651</td>\n",
       "      <td>CARICOM AIRWAYS (BARBADOS) INC.</td>\n",
       "      <td>CARICOM AIRWAYS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>CCB</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Barbados</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6019</th>\n",
       "      <td>19674</td>\n",
       "      <td>Rainbow Air (RAI)</td>\n",
       "      <td>Rainbow Air (RAI)</td>\n",
       "      <td>RN</td>\n",
       "      <td>RAB</td>\n",
       "      <td>Rainbow</td>\n",
       "      <td>United States</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6020</th>\n",
       "      <td>19675</td>\n",
       "      <td>Rainbow Air Canada</td>\n",
       "      <td>Rainbow Air CAN</td>\n",
       "      <td>RY</td>\n",
       "      <td>RAY</td>\n",
       "      <td>Rainbow CAN</td>\n",
       "      <td>Canada</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6021</th>\n",
       "      <td>19676</td>\n",
       "      <td>Rainbow Air Polynesia</td>\n",
       "      <td>Rainbow Air POL</td>\n",
       "      <td>RX</td>\n",
       "      <td>RPO</td>\n",
       "      <td>Rainbow Air</td>\n",
       "      <td>United States</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6022</th>\n",
       "      <td>19677</td>\n",
       "      <td>Rainbow Air Euro</td>\n",
       "      <td>Rainbow Air EU</td>\n",
       "      <td>RU</td>\n",
       "      <td>RUE</td>\n",
       "      <td>Rainbow Air</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6023</th>\n",
       "      <td>19678</td>\n",
       "      <td>Rainbow Air US</td>\n",
       "      <td>Rainbow Air US</td>\n",
       "      <td>RM</td>\n",
       "      <td>RNY</td>\n",
       "      <td>Rainbow Air</td>\n",
       "      <td>United States</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6024</th>\n",
       "      <td>19745</td>\n",
       "      <td>Transilvania</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>TNS</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Romania</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6025</th>\n",
       "      <td>19751</td>\n",
       "      <td>Dobrolet</td>\n",
       "      <td>Добролёт</td>\n",
       "      <td>QD</td>\n",
       "      <td>DOB</td>\n",
       "      <td>DOBROLET</td>\n",
       "      <td>Russia</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6026</th>\n",
       "      <td>19774</td>\n",
       "      <td>Spike Airlines</td>\n",
       "      <td>Aero Spike</td>\n",
       "      <td>S0</td>\n",
       "      <td>SAL</td>\n",
       "      <td>Spike Air</td>\n",
       "      <td>United States</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6027</th>\n",
       "      <td>19776</td>\n",
       "      <td>Grand Cru Airlines</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>GCA</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Lithuania</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6028</th>\n",
       "      <td>19785</td>\n",
       "      <td>Go2Sky</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>RLX</td>\n",
       "      <td>RELAX</td>\n",
       "      <td>Slovakia</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6029</th>\n",
       "      <td>19803</td>\n",
       "      <td>All Argentina</td>\n",
       "      <td>All Argentina</td>\n",
       "      <td>L1</td>\n",
       "      <td>AL1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Argentina</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6030</th>\n",
       "      <td>19804</td>\n",
       "      <td>All America</td>\n",
       "      <td>All America</td>\n",
       "      <td>A2</td>\n",
       "      <td>AL2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United States</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6031</th>\n",
       "      <td>19805</td>\n",
       "      <td>All Asia</td>\n",
       "      <td>All Asia</td>\n",
       "      <td>L9</td>\n",
       "      <td>AL3</td>\n",
       "      <td>NaN</td>\n",
       "      <td>China</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6032</th>\n",
       "      <td>19806</td>\n",
       "      <td>All Africa</td>\n",
       "      <td>All Africa</td>\n",
       "      <td>9A</td>\n",
       "      <td>99F</td>\n",
       "      <td>NaN</td>\n",
       "      <td>South Africa</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6033</th>\n",
       "      <td>19807</td>\n",
       "      <td>Regionalia México</td>\n",
       "      <td>Regionalia México</td>\n",
       "      <td>N4</td>\n",
       "      <td>J88</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Mexico</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6034</th>\n",
       "      <td>19808</td>\n",
       "      <td>All Europe</td>\n",
       "      <td>All Europe</td>\n",
       "      <td>N9</td>\n",
       "      <td>N99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6035</th>\n",
       "      <td>19809</td>\n",
       "      <td>All Spain</td>\n",
       "      <td>All Spain</td>\n",
       "      <td>N7</td>\n",
       "      <td>N77</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6036</th>\n",
       "      <td>19810</td>\n",
       "      <td>Regional Air Iceland</td>\n",
       "      <td>Regional Air Iceland</td>\n",
       "      <td>9N</td>\n",
       "      <td>N78</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Iceland</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6037</th>\n",
       "      <td>19811</td>\n",
       "      <td>British Air Ferries</td>\n",
       "      <td>NaN</td>\n",
       "      <td>??</td>\n",
       "      <td>??!</td>\n",
       "      <td>NaN</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6038</th>\n",
       "      <td>19812</td>\n",
       "      <td>Voestar</td>\n",
       "      <td>Voestar Brasil</td>\n",
       "      <td>8K</td>\n",
       "      <td>K88</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Brazil</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6039</th>\n",
       "      <td>19813</td>\n",
       "      <td>All Colombia</td>\n",
       "      <td>All Colombia</td>\n",
       "      <td>7O</td>\n",
       "      <td>7KK</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Colombia</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6040</th>\n",
       "      <td>19814</td>\n",
       "      <td>Regionalia Uruguay</td>\n",
       "      <td>Regionalia Uruguay</td>\n",
       "      <td>2X</td>\n",
       "      <td>2K2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Uruguay</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6041</th>\n",
       "      <td>19815</td>\n",
       "      <td>Regionalia Venezuela</td>\n",
       "      <td>Regionalia Venezuela</td>\n",
       "      <td>9X</td>\n",
       "      <td>9XX</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Venezuela</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6042</th>\n",
       "      <td>19827</td>\n",
       "      <td>Regionalia Chile</td>\n",
       "      <td>Regionalia Chile</td>\n",
       "      <td>9J</td>\n",
       "      <td>CR1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Chile</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6043</th>\n",
       "      <td>19828</td>\n",
       "      <td>Vuela Cuba</td>\n",
       "      <td>Vuela Cuba</td>\n",
       "      <td>6C</td>\n",
       "      <td>6CC</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cuba</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6044</th>\n",
       "      <td>19830</td>\n",
       "      <td>All Australia</td>\n",
       "      <td>All Australia</td>\n",
       "      <td>88</td>\n",
       "      <td>8K8</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Australia</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6045</th>\n",
       "      <td>19831</td>\n",
       "      <td>Fly Europa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>ER</td>\n",
       "      <td>RWW</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6046</th>\n",
       "      <td>19834</td>\n",
       "      <td>FlyPortugal</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PO</td>\n",
       "      <td>FPT</td>\n",
       "      <td>FlyPortugal</td>\n",
       "      <td>Portugal</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6047</th>\n",
       "      <td>19845</td>\n",
       "      <td>FTI Fluggesellschaft</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>FTI</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Germany</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6048 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      airline_id                                  airline_name  \\\n",
       "0              1                                Private flight   \n",
       "1              2                                   135 Airways   \n",
       "2              3                                 1Time Airline   \n",
       "3              4  2 Sqn No 1 Elementary Flying Training School   \n",
       "4              5                               213 Flight Unit   \n",
       "5              6                 223 Flight Unit State Airline   \n",
       "6              7                             224th Flight Unit   \n",
       "7              8                                   247 Jet Ltd   \n",
       "8              9                                   3D Aviation   \n",
       "9             10                                   40-Mile Air   \n",
       "10            11                                        4D Air   \n",
       "11            12                        611897 Alberta Limited   \n",
       "12            13                              Ansett Australia   \n",
       "13            14                          Abacus International   \n",
       "14            15                               Abelag Aviation   \n",
       "15            16                                Army Air Corps   \n",
       "16            17                     Aero Aviation Centre Ltd.   \n",
       "17            18     Aero Servicios Ejecutivos Internacionales   \n",
       "18            19                                   Aero Biniza   \n",
       "19            20                                 Aero Albatros   \n",
       "20            21                                    Aigle Azur   \n",
       "21            22                                Aloha Airlines   \n",
       "22            23                             Alaska Island Air   \n",
       "23            24                             American Airlines   \n",
       "24            25               Aviation Management Corporation   \n",
       "25            26                       Atlantis Airlines (USA)   \n",
       "26            27                            Aerovista Airlines   \n",
       "27            28                               Asiana Airlines   \n",
       "28            29                               Askari Aviation   \n",
       "29            30                       Australia Asia Airlines   \n",
       "...          ...                                           ...   \n",
       "6018       19651               CARICOM AIRWAYS (BARBADOS) INC.   \n",
       "6019       19674                             Rainbow Air (RAI)   \n",
       "6020       19675                            Rainbow Air Canada   \n",
       "6021       19676                         Rainbow Air Polynesia   \n",
       "6022       19677                              Rainbow Air Euro   \n",
       "6023       19678                                Rainbow Air US   \n",
       "6024       19745                                  Transilvania   \n",
       "6025       19751                                      Dobrolet   \n",
       "6026       19774                                Spike Airlines   \n",
       "6027       19776                            Grand Cru Airlines   \n",
       "6028       19785                                        Go2Sky   \n",
       "6029       19803                                 All Argentina   \n",
       "6030       19804                                   All America   \n",
       "6031       19805                                      All Asia   \n",
       "6032       19806                                    All Africa   \n",
       "6033       19807                             Regionalia México   \n",
       "6034       19808                                    All Europe   \n",
       "6035       19809                                     All Spain   \n",
       "6036       19810                          Regional Air Iceland   \n",
       "6037       19811                           British Air Ferries   \n",
       "6038       19812                                       Voestar   \n",
       "6039       19813                                  All Colombia   \n",
       "6040       19814                            Regionalia Uruguay   \n",
       "6041       19815                          Regionalia Venezuela   \n",
       "6042       19827                              Regionalia Chile   \n",
       "6043       19828                                    Vuela Cuba   \n",
       "6044       19830                                 All Australia   \n",
       "6045       19831                                    Fly Europa   \n",
       "6046       19834                                   FlyPortugal   \n",
       "6047       19845                          FTI Fluggesellschaft   \n",
       "\n",
       "             airline_alias airline_iata airline_icao airline_callsign  \\\n",
       "0                       \\N            -          NaN              NaN   \n",
       "1                       \\N          NaN          GNL          GENERAL   \n",
       "2                       \\N           1T          RNX          NEXTIME   \n",
       "3                       \\N          NaN          WYT              NaN   \n",
       "4                       \\N          NaN          TFU              NaN   \n",
       "5                       \\N          NaN          CHD   CHKALOVSK-AVIA   \n",
       "6                       \\N          NaN          TTF       CARGO UNIT   \n",
       "7                       \\N          NaN          TWF     CLOUD RUNNER   \n",
       "8                       \\N          NaN          SEC          SECUREX   \n",
       "9                       \\N           Q5          MLA         MILE-AIR   \n",
       "10                      \\N          NaN          QRT          QUARTET   \n",
       "11                      \\N          NaN          THD            DONUT   \n",
       "12                      \\N           AN          AAA           ANSETT   \n",
       "13                      \\N           1B          NaN              NaN   \n",
       "14                      \\N           W9          AAB              ABG   \n",
       "15                      \\N          NaN          AAC          ARMYAIR   \n",
       "16                      \\N          NaN          AAD          SUNRISE   \n",
       "17                      \\N          NaN          SII           ASEISA   \n",
       "18                      \\N          NaN          BZS           BINIZA   \n",
       "19                      \\N          NaN          ABM  ALBATROS ESPANA   \n",
       "20                      \\N           ZI          AAF       AIGLE AZUR   \n",
       "21                      \\N           AQ          AAH            ALOHA   \n",
       "22                      \\N          NaN          AAK    ALASKA ISLAND   \n",
       "23                      \\N           AA          AAL         AMERICAN   \n",
       "24                      \\N          NaN          AAM          AM CORP   \n",
       "25                      \\N          NaN          AAO     ATLANTIS AIR   \n",
       "26                      \\N          NaN          AAP  AEROVISTA GROUP   \n",
       "27                      \\N           OZ          AAR           ASIANA   \n",
       "28                      \\N           4K          AAS           AL-AAS   \n",
       "29                      \\N          NaN          AAU         AUSTASIA   \n",
       "...                    ...          ...          ...              ...   \n",
       "6018       CARICOM AIRWAYS          NaN          CCB              NaN   \n",
       "6019     Rainbow Air (RAI)           RN          RAB          Rainbow   \n",
       "6020       Rainbow Air CAN           RY          RAY      Rainbow CAN   \n",
       "6021       Rainbow Air POL           RX          RPO      Rainbow Air   \n",
       "6022        Rainbow Air EU           RU          RUE      Rainbow Air   \n",
       "6023        Rainbow Air US           RM          RNY      Rainbow Air   \n",
       "6024                   NaN          NaN          TNS              NaN   \n",
       "6025              Добролёт           QD          DOB         DOBROLET   \n",
       "6026            Aero Spike           S0          SAL        Spike Air   \n",
       "6027                   NaN          NaN          GCA              NaN   \n",
       "6028                   NaN          NaN          RLX            RELAX   \n",
       "6029         All Argentina           L1          AL1              NaN   \n",
       "6030           All America           A2          AL2              NaN   \n",
       "6031              All Asia           L9          AL3              NaN   \n",
       "6032            All Africa           9A          99F              NaN   \n",
       "6033     Regionalia México           N4          J88              NaN   \n",
       "6034            All Europe           N9          N99              NaN   \n",
       "6035             All Spain           N7          N77              NaN   \n",
       "6036  Regional Air Iceland           9N          N78              NaN   \n",
       "6037                   NaN           ??          ??!              NaN   \n",
       "6038        Voestar Brasil           8K          K88              NaN   \n",
       "6039          All Colombia           7O          7KK              NaN   \n",
       "6040    Regionalia Uruguay           2X          2K2              NaN   \n",
       "6041  Regionalia Venezuela           9X          9XX              NaN   \n",
       "6042      Regionalia Chile           9J          CR1              NaN   \n",
       "6043            Vuela Cuba           6C          6CC              NaN   \n",
       "6044         All Australia           88          8K8              NaN   \n",
       "6045                   NaN           ER          RWW              NaN   \n",
       "6046                   NaN           PO          FPT      FlyPortugal   \n",
       "6047                   NaN          NaN          FTI              NaN   \n",
       "\n",
       "                   country active  \n",
       "0                      NaN      Y  \n",
       "1            United States      N  \n",
       "2             South Africa      Y  \n",
       "3           United Kingdom      N  \n",
       "4                   Russia      N  \n",
       "5                   Russia      N  \n",
       "6                   Russia      N  \n",
       "7           United Kingdom      N  \n",
       "8            United States      N  \n",
       "9            United States      Y  \n",
       "10                Thailand      N  \n",
       "11                  Canada      N  \n",
       "12               Australia      Y  \n",
       "13               Singapore      Y  \n",
       "14                 Belgium      N  \n",
       "15          United Kingdom      N  \n",
       "16                  Canada      N  \n",
       "17                  Mexico      N  \n",
       "18                  Mexico      N  \n",
       "19                   Spain      N  \n",
       "20                  France      Y  \n",
       "21           United States      Y  \n",
       "22           United States      N  \n",
       "23           United States      Y  \n",
       "24           United States      N  \n",
       "25           United States      N  \n",
       "26    United Arab Emirates      N  \n",
       "27       Republic of Korea      Y  \n",
       "28                Pakistan      Y  \n",
       "29               Australia      N  \n",
       "...                    ...    ...  \n",
       "6018              Barbados      Y  \n",
       "6019         United States      Y  \n",
       "6020                Canada      Y  \n",
       "6021         United States      Y  \n",
       "6022        United Kingdom      Y  \n",
       "6023         United States      Y  \n",
       "6024               Romania      Y  \n",
       "6025                Russia      Y  \n",
       "6026         United States      Y  \n",
       "6027             Lithuania      Y  \n",
       "6028              Slovakia      Y  \n",
       "6029             Argentina      Y  \n",
       "6030         United States      Y  \n",
       "6031                 China      Y  \n",
       "6032          South Africa      Y  \n",
       "6033                Mexico      Y  \n",
       "6034        United Kingdom      Y  \n",
       "6035                 Spain      Y  \n",
       "6036               Iceland      Y  \n",
       "6037        United Kingdom      N  \n",
       "6038                Brazil      Y  \n",
       "6039              Colombia      Y  \n",
       "6040               Uruguay      Y  \n",
       "6041             Venezuela      Y  \n",
       "6042                 Chile      Y  \n",
       "6043                  Cuba      Y  \n",
       "6044             Australia      Y  \n",
       "6045                 Spain      Y  \n",
       "6046              Portugal      Y  \n",
       "6047               Germany      N  \n",
       "\n",
       "[6048 rows x 8 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Output airlines_df\n",
    "airlines_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-f572c8f2d3f05a3e",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>airline_iata</th>\n",
       "      <th>airline_id</th>\n",
       "      <th>src_iata_icao</th>\n",
       "      <th>source_id</th>\n",
       "      <th>target_iata_icao</th>\n",
       "      <th>target_id</th>\n",
       "      <th>code_share</th>\n",
       "      <th>stops</th>\n",
       "      <th>equipment</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>AER</td>\n",
       "      <td>2965</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>ASF</td>\n",
       "      <td>2966</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>ASF</td>\n",
       "      <td>2966</td>\n",
       "      <td>MRV</td>\n",
       "      <td>2962</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>CEK</td>\n",
       "      <td>2968</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>CEK</td>\n",
       "      <td>2968</td>\n",
       "      <td>OVB</td>\n",
       "      <td>4078</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>DME</td>\n",
       "      <td>4029</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>DME</td>\n",
       "      <td>4029</td>\n",
       "      <td>NBC</td>\n",
       "      <td>6969</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>DME</td>\n",
       "      <td>4029</td>\n",
       "      <td>TGK</td>\n",
       "      <td>\\N</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>DME</td>\n",
       "      <td>4029</td>\n",
       "      <td>UUA</td>\n",
       "      <td>6160</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>EGO</td>\n",
       "      <td>6156</td>\n",
       "      <td>KGD</td>\n",
       "      <td>2952</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>EGO</td>\n",
       "      <td>6156</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>GYD</td>\n",
       "      <td>2922</td>\n",
       "      <td>NBC</td>\n",
       "      <td>6969</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>KGD</td>\n",
       "      <td>2952</td>\n",
       "      <td>EGO</td>\n",
       "      <td>6156</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>AER</td>\n",
       "      <td>2965</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>ASF</td>\n",
       "      <td>2966</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>CEK</td>\n",
       "      <td>2968</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>DME</td>\n",
       "      <td>4029</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>EGO</td>\n",
       "      <td>6156</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>LED</td>\n",
       "      <td>2948</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>SVX</td>\n",
       "      <td>2975</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>LED</td>\n",
       "      <td>2948</td>\n",
       "      <td>KZN</td>\n",
       "      <td>2990</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>LED</td>\n",
       "      <td>2948</td>\n",
       "      <td>NBC</td>\n",
       "      <td>6969</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>LED</td>\n",
       "      <td>2948</td>\n",
       "      <td>UUA</td>\n",
       "      <td>6160</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>MRV</td>\n",
       "      <td>2962</td>\n",
       "      <td>ASF</td>\n",
       "      <td>2966</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>NBC</td>\n",
       "      <td>6969</td>\n",
       "      <td>DME</td>\n",
       "      <td>4029</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>NBC</td>\n",
       "      <td>6969</td>\n",
       "      <td>GYD</td>\n",
       "      <td>2922</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>NBC</td>\n",
       "      <td>6969</td>\n",
       "      <td>LED</td>\n",
       "      <td>2948</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>NBC</td>\n",
       "      <td>6969</td>\n",
       "      <td>SVX</td>\n",
       "      <td>2975</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>NJC</td>\n",
       "      <td>2972</td>\n",
       "      <td>SVX</td>\n",
       "      <td>2975</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2B</td>\n",
       "      <td>410</td>\n",
       "      <td>NJC</td>\n",
       "      <td>2972</td>\n",
       "      <td>UUA</td>\n",
       "      <td>6160</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>CR2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67633</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>ABX</td>\n",
       "      <td>3333</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67634</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>ARM</td>\n",
       "      <td>4062</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67635</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>BHQ</td>\n",
       "      <td>6241</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67636</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>BHS</td>\n",
       "      <td>6249</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67637</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>BNK</td>\n",
       "      <td>4291</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67638</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>DBO</td>\n",
       "      <td>3358</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67639</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>GFF</td>\n",
       "      <td>6271</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67640</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>LSY</td>\n",
       "      <td>6287</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67641</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>MIM</td>\n",
       "      <td>6294</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67642</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>MQL</td>\n",
       "      <td>6298</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67643</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>MYA</td>\n",
       "      <td>6302</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67644</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>NRA</td>\n",
       "      <td>6307</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67645</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>NTL</td>\n",
       "      <td>4320</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67646</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>OAG</td>\n",
       "      <td>6793</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67647</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>PKE</td>\n",
       "      <td>6317</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67648</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>TRO</td>\n",
       "      <td>6794</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67649</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>WGA</td>\n",
       "      <td>3363</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67650</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>TRO</td>\n",
       "      <td>6794</td>\n",
       "      <td>GFN</td>\n",
       "      <td>6792</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67651</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>TRO</td>\n",
       "      <td>6794</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67652</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>TSV</td>\n",
       "      <td>3330</td>\n",
       "      <td>ISA</td>\n",
       "      <td>3324</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67653</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>TSV</td>\n",
       "      <td>3330</td>\n",
       "      <td>WIN</td>\n",
       "      <td>6337</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67654</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>WGA</td>\n",
       "      <td>3363</td>\n",
       "      <td>MEL</td>\n",
       "      <td>3339</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67655</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>WGA</td>\n",
       "      <td>3363</td>\n",
       "      <td>SYD</td>\n",
       "      <td>3361</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67656</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>WIN</td>\n",
       "      <td>6337</td>\n",
       "      <td>LRE</td>\n",
       "      <td>6289</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67657</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>WIN</td>\n",
       "      <td>6337</td>\n",
       "      <td>TSV</td>\n",
       "      <td>3330</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67658</th>\n",
       "      <td>ZL</td>\n",
       "      <td>4178</td>\n",
       "      <td>WYA</td>\n",
       "      <td>6334</td>\n",
       "      <td>ADL</td>\n",
       "      <td>3341</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>SF3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67659</th>\n",
       "      <td>ZM</td>\n",
       "      <td>19016</td>\n",
       "      <td>DME</td>\n",
       "      <td>4029</td>\n",
       "      <td>FRU</td>\n",
       "      <td>2912</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67660</th>\n",
       "      <td>ZM</td>\n",
       "      <td>19016</td>\n",
       "      <td>FRU</td>\n",
       "      <td>2912</td>\n",
       "      <td>DME</td>\n",
       "      <td>4029</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67661</th>\n",
       "      <td>ZM</td>\n",
       "      <td>19016</td>\n",
       "      <td>FRU</td>\n",
       "      <td>2912</td>\n",
       "      <td>OSS</td>\n",
       "      <td>2913</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>734</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67662</th>\n",
       "      <td>ZM</td>\n",
       "      <td>19016</td>\n",
       "      <td>OSS</td>\n",
       "      <td>2913</td>\n",
       "      <td>FRU</td>\n",
       "      <td>2912</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0</td>\n",
       "      <td>734</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67663 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      airline_iata airline_id src_iata_icao source_id target_iata_icao  \\\n",
       "0               2B        410           AER      2965              KZN   \n",
       "1               2B        410           ASF      2966              KZN   \n",
       "2               2B        410           ASF      2966              MRV   \n",
       "3               2B        410           CEK      2968              KZN   \n",
       "4               2B        410           CEK      2968              OVB   \n",
       "5               2B        410           DME      4029              KZN   \n",
       "6               2B        410           DME      4029              NBC   \n",
       "7               2B        410           DME      4029              TGK   \n",
       "8               2B        410           DME      4029              UUA   \n",
       "9               2B        410           EGO      6156              KGD   \n",
       "10              2B        410           EGO      6156              KZN   \n",
       "11              2B        410           GYD      2922              NBC   \n",
       "12              2B        410           KGD      2952              EGO   \n",
       "13              2B        410           KZN      2990              AER   \n",
       "14              2B        410           KZN      2990              ASF   \n",
       "15              2B        410           KZN      2990              CEK   \n",
       "16              2B        410           KZN      2990              DME   \n",
       "17              2B        410           KZN      2990              EGO   \n",
       "18              2B        410           KZN      2990              LED   \n",
       "19              2B        410           KZN      2990              SVX   \n",
       "20              2B        410           LED      2948              KZN   \n",
       "21              2B        410           LED      2948              NBC   \n",
       "22              2B        410           LED      2948              UUA   \n",
       "23              2B        410           MRV      2962              ASF   \n",
       "24              2B        410           NBC      6969              DME   \n",
       "25              2B        410           NBC      6969              GYD   \n",
       "26              2B        410           NBC      6969              LED   \n",
       "27              2B        410           NBC      6969              SVX   \n",
       "28              2B        410           NJC      2972              SVX   \n",
       "29              2B        410           NJC      2972              UUA   \n",
       "...            ...        ...           ...       ...              ...   \n",
       "67633           ZL       4178           SYD      3361              ABX   \n",
       "67634           ZL       4178           SYD      3361              ARM   \n",
       "67635           ZL       4178           SYD      3361              BHQ   \n",
       "67636           ZL       4178           SYD      3361              BHS   \n",
       "67637           ZL       4178           SYD      3361              BNK   \n",
       "67638           ZL       4178           SYD      3361              DBO   \n",
       "67639           ZL       4178           SYD      3361              GFF   \n",
       "67640           ZL       4178           SYD      3361              LSY   \n",
       "67641           ZL       4178           SYD      3361              MIM   \n",
       "67642           ZL       4178           SYD      3361              MQL   \n",
       "67643           ZL       4178           SYD      3361              MYA   \n",
       "67644           ZL       4178           SYD      3361              NRA   \n",
       "67645           ZL       4178           SYD      3361              NTL   \n",
       "67646           ZL       4178           SYD      3361              OAG   \n",
       "67647           ZL       4178           SYD      3361              PKE   \n",
       "67648           ZL       4178           SYD      3361              TRO   \n",
       "67649           ZL       4178           SYD      3361              WGA   \n",
       "67650           ZL       4178           TRO      6794              GFN   \n",
       "67651           ZL       4178           TRO      6794              SYD   \n",
       "67652           ZL       4178           TSV      3330              ISA   \n",
       "67653           ZL       4178           TSV      3330              WIN   \n",
       "67654           ZL       4178           WGA      3363              MEL   \n",
       "67655           ZL       4178           WGA      3363              SYD   \n",
       "67656           ZL       4178           WIN      6337              LRE   \n",
       "67657           ZL       4178           WIN      6337              TSV   \n",
       "67658           ZL       4178           WYA      6334              ADL   \n",
       "67659           ZM      19016           DME      4029              FRU   \n",
       "67660           ZM      19016           FRU      2912              DME   \n",
       "67661           ZM      19016           FRU      2912              OSS   \n",
       "67662           ZM      19016           OSS      2913              FRU   \n",
       "\n",
       "      target_id code_share  stops equipment  \n",
       "0          2990        NaN      0       CR2  \n",
       "1          2990        NaN      0       CR2  \n",
       "2          2962        NaN      0       CR2  \n",
       "3          2990        NaN      0       CR2  \n",
       "4          4078        NaN      0       CR2  \n",
       "5          2990        NaN      0       CR2  \n",
       "6          6969        NaN      0       CR2  \n",
       "7            \\N        NaN      0       CR2  \n",
       "8          6160        NaN      0       CR2  \n",
       "9          2952        NaN      0       CR2  \n",
       "10         2990        NaN      0       CR2  \n",
       "11         6969        NaN      0       CR2  \n",
       "12         6156        NaN      0       CR2  \n",
       "13         2965        NaN      0       CR2  \n",
       "14         2966        NaN      0       CR2  \n",
       "15         2968        NaN      0       CR2  \n",
       "16         4029        NaN      0       CR2  \n",
       "17         6156        NaN      0       CR2  \n",
       "18         2948        NaN      0       CR2  \n",
       "19         2975        NaN      0       CR2  \n",
       "20         2990        NaN      0       CR2  \n",
       "21         6969        NaN      0       CR2  \n",
       "22         6160        NaN      0       CR2  \n",
       "23         2966        NaN      0       CR2  \n",
       "24         4029        NaN      0       CR2  \n",
       "25         2922        NaN      0       CR2  \n",
       "26         2948        NaN      0       CR2  \n",
       "27         2975        NaN      0       CR2  \n",
       "28         2975        NaN      0       CR2  \n",
       "29         6160        NaN      0       CR2  \n",
       "...         ...        ...    ...       ...  \n",
       "67633      3333        NaN      0       SF3  \n",
       "67634      4062        NaN      0       SF3  \n",
       "67635      6241        NaN      0       SF3  \n",
       "67636      6249        NaN      0       SF3  \n",
       "67637      4291        NaN      0       SF3  \n",
       "67638      3358        NaN      0       SF3  \n",
       "67639      6271        NaN      0       SF3  \n",
       "67640      6287        NaN      0       SF3  \n",
       "67641      6294        NaN      0       SF3  \n",
       "67642      6298        NaN      0       SF3  \n",
       "67643      6302        NaN      0       SF3  \n",
       "67644      6307        NaN      0       SF3  \n",
       "67645      4320        NaN      0       SF3  \n",
       "67646      6793        NaN      0       SF3  \n",
       "67647      6317        NaN      0       SF3  \n",
       "67648      6794        NaN      0       SF3  \n",
       "67649      3363        NaN      0       SF3  \n",
       "67650      6792        NaN      0       SF3  \n",
       "67651      3361        NaN      0       SF3  \n",
       "67652      3324        NaN      0       SF3  \n",
       "67653      6337        NaN      0       SF3  \n",
       "67654      3339        NaN      0       SF3  \n",
       "67655      3361        NaN      0       SF3  \n",
       "67656      6289        NaN      0       SF3  \n",
       "67657      3330        NaN      0       SF3  \n",
       "67658      3341        NaN      0       SF3  \n",
       "67659      2912        NaN      0       734  \n",
       "67660      4029        NaN      0       734  \n",
       "67661      2913        NaN      0       734  \n",
       "67662      2912        NaN      0       734  \n",
       "\n",
       "[67663 rows x 9 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Output routes_df\n",
    "routes_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-6f0257a97376fd37",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YEAR</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>DAY_OF_MONTH</th>\n",
       "      <th>CARRIER</th>\n",
       "      <th>FL_NUM</th>\n",
       "      <th>ORIGIN</th>\n",
       "      <th>DEST</th>\n",
       "      <th>ARR_DELAY_NEW</th>\n",
       "      <th>CANCELLED</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>1325</td>\n",
       "      <td>SJU</td>\n",
       "      <td>MCO</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5159</td>\n",
       "      <td>SJU</td>\n",
       "      <td>MCO</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5890</td>\n",
       "      <td>SJU</td>\n",
       "      <td>MCO</td>\n",
       "      <td>9.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6618</td>\n",
       "      <td>SJU</td>\n",
       "      <td>MCO</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>1701</td>\n",
       "      <td>SJU</td>\n",
       "      <td>MDW</td>\n",
       "      <td>8.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>844</td>\n",
       "      <td>SJU</td>\n",
       "      <td>TPA</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>4679</td>\n",
       "      <td>SJU</td>\n",
       "      <td>TPA</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6294</td>\n",
       "      <td>SLC</td>\n",
       "      <td>BUR</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5245</td>\n",
       "      <td>SLC</td>\n",
       "      <td>DAL</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>2278</td>\n",
       "      <td>SLC</td>\n",
       "      <td>DEN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5125</td>\n",
       "      <td>SLC</td>\n",
       "      <td>DEN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6215</td>\n",
       "      <td>SLC</td>\n",
       "      <td>DEN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6913</td>\n",
       "      <td>SLC</td>\n",
       "      <td>DEN</td>\n",
       "      <td>23.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>3731</td>\n",
       "      <td>SLC</td>\n",
       "      <td>HOU</td>\n",
       "      <td>94.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5549</td>\n",
       "      <td>SLC</td>\n",
       "      <td>LAS</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5810</td>\n",
       "      <td>SLC</td>\n",
       "      <td>LAS</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6556</td>\n",
       "      <td>SLC</td>\n",
       "      <td>LAS</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6599</td>\n",
       "      <td>SLC</td>\n",
       "      <td>LAS</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5673</td>\n",
       "      <td>SLC</td>\n",
       "      <td>LAX</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6819</td>\n",
       "      <td>SLC</td>\n",
       "      <td>LAX</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5053</td>\n",
       "      <td>SLC</td>\n",
       "      <td>MDW</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5911</td>\n",
       "      <td>SLC</td>\n",
       "      <td>MDW</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6622</td>\n",
       "      <td>SLC</td>\n",
       "      <td>OAK</td>\n",
       "      <td>29.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6671</td>\n",
       "      <td>SLC</td>\n",
       "      <td>OAK</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6799</td>\n",
       "      <td>SLC</td>\n",
       "      <td>OAK</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>1315</td>\n",
       "      <td>SLC</td>\n",
       "      <td>PHX</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5007</td>\n",
       "      <td>SLC</td>\n",
       "      <td>PHX</td>\n",
       "      <td>20.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5218</td>\n",
       "      <td>SLC</td>\n",
       "      <td>PHX</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5913</td>\n",
       "      <td>SLC</td>\n",
       "      <td>PHX</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6909</td>\n",
       "      <td>SLC</td>\n",
       "      <td>PHX</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570088</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>734</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>101.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570089</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>744</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570090</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>1163</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570091</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>3527</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>124.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570092</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5294</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>75.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570093</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5421</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>60.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570094</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6225</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570095</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6499</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>80.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570096</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6519</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>64.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570097</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6562</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>176.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570098</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6783</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>45.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570099</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6816</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>7.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570100</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6850</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>4.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570101</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6889</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SAN</td>\n",
       "      <td>68.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570102</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>4257</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SEA</td>\n",
       "      <td>57.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570103</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6211</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SEA</td>\n",
       "      <td>113.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570104</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6493</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SEA</td>\n",
       "      <td>6.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570105</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6796</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SEA</td>\n",
       "      <td>83.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570106</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6988</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SEA</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570107</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5125</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SLC</td>\n",
       "      <td>112.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570108</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>29</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SNA</td>\n",
       "      <td>89.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570109</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>1420</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SNA</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570110</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5390</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SNA</td>\n",
       "      <td>107.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570111</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5453</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SNA</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570112</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5598</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SNA</td>\n",
       "      <td>15.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570113</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>5671</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SNA</td>\n",
       "      <td>11.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570114</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6065</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SNA</td>\n",
       "      <td>76.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570115</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6185</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SNA</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570116</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6456</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SNA</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>570117</th>\n",
       "      <td>2018</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>WN</td>\n",
       "      <td>6937</td>\n",
       "      <td>SJC</td>\n",
       "      <td>SNA</td>\n",
       "      <td>25.0</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>570118 rows × 9 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        YEAR  MONTH  DAY_OF_MONTH CARRIER  FL_NUM ORIGIN DEST  ARR_DELAY_NEW  \\\n",
       "0       2018      1             2      WN    1325    SJU  MCO            0.0   \n",
       "1       2018      1             2      WN    5159    SJU  MCO            0.0   \n",
       "2       2018      1             2      WN    5890    SJU  MCO            9.0   \n",
       "3       2018      1             2      WN    6618    SJU  MCO            0.0   \n",
       "4       2018      1             2      WN    1701    SJU  MDW            8.0   \n",
       "5       2018      1             2      WN     844    SJU  TPA           23.0   \n",
       "6       2018      1             2      WN    4679    SJU  TPA            0.0   \n",
       "7       2018      1             2      WN    6294    SLC  BUR           20.0   \n",
       "8       2018      1             2      WN    5245    SLC  DAL            0.0   \n",
       "9       2018      1             2      WN    2278    SLC  DEN            0.0   \n",
       "10      2018      1             2      WN    5125    SLC  DEN            7.0   \n",
       "11      2018      1             2      WN    6215    SLC  DEN            0.0   \n",
       "12      2018      1             2      WN    6913    SLC  DEN           23.0   \n",
       "13      2018      1             2      WN    3731    SLC  HOU           94.0   \n",
       "14      2018      1             2      WN    5549    SLC  LAS            0.0   \n",
       "15      2018      1             2      WN    5810    SLC  LAS            0.0   \n",
       "16      2018      1             2      WN    6556    SLC  LAS            0.0   \n",
       "17      2018      1             2      WN    6599    SLC  LAS           27.0   \n",
       "18      2018      1             2      WN    5673    SLC  LAX           25.0   \n",
       "19      2018      1             2      WN    6819    SLC  LAX            0.0   \n",
       "20      2018      1             2      WN    5053    SLC  MDW            0.0   \n",
       "21      2018      1             2      WN    5911    SLC  MDW            0.0   \n",
       "22      2018      1             2      WN    6622    SLC  OAK           29.0   \n",
       "23      2018      1             2      WN    6671    SLC  OAK            4.0   \n",
       "24      2018      1             2      WN    6799    SLC  OAK            0.0   \n",
       "25      2018      1             2      WN    1315    SLC  PHX            0.0   \n",
       "26      2018      1             2      WN    5007    SLC  PHX           20.0   \n",
       "27      2018      1             2      WN    5218    SLC  PHX            0.0   \n",
       "28      2018      1             2      WN    5913    SLC  PHX            0.0   \n",
       "29      2018      1             2      WN    6909    SLC  PHX            0.0   \n",
       "...      ...    ...           ...     ...     ...    ...  ...            ...   \n",
       "570088  2018      1             2      WN     734    SJC  SAN          101.0   \n",
       "570089  2018      1             2      WN     744    SJC  SAN            7.0   \n",
       "570090  2018      1             2      WN    1163    SJC  SAN            0.0   \n",
       "570091  2018      1             2      WN    3527    SJC  SAN          124.0   \n",
       "570092  2018      1             2      WN    5294    SJC  SAN           75.0   \n",
       "570093  2018      1             2      WN    5421    SJC  SAN           60.0   \n",
       "570094  2018      1             2      WN    6225    SJC  SAN            0.0   \n",
       "570095  2018      1             2      WN    6499    SJC  SAN           80.0   \n",
       "570096  2018      1             2      WN    6519    SJC  SAN           64.0   \n",
       "570097  2018      1             2      WN    6562    SJC  SAN          176.0   \n",
       "570098  2018      1             2      WN    6783    SJC  SAN           45.0   \n",
       "570099  2018      1             2      WN    6816    SJC  SAN            7.0   \n",
       "570100  2018      1             2      WN    6850    SJC  SAN            4.0   \n",
       "570101  2018      1             2      WN    6889    SJC  SAN           68.0   \n",
       "570102  2018      1             2      WN    4257    SJC  SEA           57.0   \n",
       "570103  2018      1             2      WN    6211    SJC  SEA          113.0   \n",
       "570104  2018      1             2      WN    6493    SJC  SEA            6.0   \n",
       "570105  2018      1             2      WN    6796    SJC  SEA           83.0   \n",
       "570106  2018      1             2      WN    6988    SJC  SEA            0.0   \n",
       "570107  2018      1             2      WN    5125    SJC  SLC          112.0   \n",
       "570108  2018      1             2      WN      29    SJC  SNA           89.0   \n",
       "570109  2018      1             2      WN    1420    SJC  SNA            0.0   \n",
       "570110  2018      1             2      WN    5390    SJC  SNA          107.0   \n",
       "570111  2018      1             2      WN    5453    SJC  SNA            0.0   \n",
       "570112  2018      1             2      WN    5598    SJC  SNA           15.0   \n",
       "570113  2018      1             2      WN    5671    SJC  SNA           11.0   \n",
       "570114  2018      1             2      WN    6065    SJC  SNA           76.0   \n",
       "570115  2018      1             2      WN    6185    SJC  SNA            0.0   \n",
       "570116  2018      1             2      WN    6456    SJC  SNA            0.0   \n",
       "570117  2018      1             2      WN    6937    SJC  SNA           25.0   \n",
       "\n",
       "        CANCELLED  \n",
       "0             0.0  \n",
       "1             0.0  \n",
       "2             0.0  \n",
       "3             0.0  \n",
       "4             0.0  \n",
       "5             0.0  \n",
       "6             0.0  \n",
       "7             0.0  \n",
       "8             0.0  \n",
       "9             0.0  \n",
       "10            0.0  \n",
       "11            0.0  \n",
       "12            0.0  \n",
       "13            0.0  \n",
       "14            0.0  \n",
       "15            0.0  \n",
       "16            0.0  \n",
       "17            0.0  \n",
       "18            0.0  \n",
       "19            0.0  \n",
       "20            0.0  \n",
       "21            0.0  \n",
       "22            0.0  \n",
       "23            0.0  \n",
       "24            0.0  \n",
       "25            0.0  \n",
       "26            0.0  \n",
       "27            0.0  \n",
       "28            0.0  \n",
       "29            0.0  \n",
       "...           ...  \n",
       "570088        0.0  \n",
       "570089        0.0  \n",
       "570090        0.0  \n",
       "570091        0.0  \n",
       "570092        0.0  \n",
       "570093        0.0  \n",
       "570094        0.0  \n",
       "570095        0.0  \n",
       "570096        0.0  \n",
       "570097        0.0  \n",
       "570098        0.0  \n",
       "570099        0.0  \n",
       "570100        0.0  \n",
       "570101        0.0  \n",
       "570102        0.0  \n",
       "570103        0.0  \n",
       "570104        0.0  \n",
       "570105        0.0  \n",
       "570106        0.0  \n",
       "570107        0.0  \n",
       "570108        0.0  \n",
       "570109        0.0  \n",
       "570110        0.0  \n",
       "570111        0.0  \n",
       "570112        0.0  \n",
       "570113        0.0  \n",
       "570114        0.0  \n",
       "570115        0.0  \n",
       "570116        0.0  \n",
       "570117        0.0  \n",
       "\n",
       "[570118 rows x 9 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Output flights_df\n",
    "flights_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-9e6d450a0dcf3b3a",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "## 1.2: Importing Text Data\n",
    "\n",
    "We are going to scrape data from the aircraft_incidents.htm webpage using the *beautifulsoup4* package. More details can be found in the documentation: https://www.crummy.com/software/BeautifulSoup/bs4/doc/.\n",
    "\n",
    "Run the code snippet that stores the web content in soup. Once the content is extracted, we need to get rid of the HTML tags and select the data we are going to be looking at. The data we need are the year and the description of the incidents under that year. It can be seen that the HTML tag (almost always) for the year is `<h3>` and for the incidents it is `<li>`. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-d1dd7e7726562467",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [
    {
     "ename": "FeatureNotFound",
     "evalue": "Couldn't find a tree builder with the features you requested: html5lib. Do you need to install a parser library?",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mFeatureNotFound\u001b[0m                           Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-24-4b3d9a794139>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0minput_html\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"aircraft_incidents.htm\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput_html\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"r\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mifile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0msoup\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBeautifulSoup\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mifile\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'html5lib'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/home/ubuntu/anaconda3/lib/python3.5/site-packages/bs4/__init__.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, markup, features, builder, parse_only, from_encoding, exclude_encodings, **kwargs)\u001b[0m\n\u001b[1;32m    163\u001b[0m                     \u001b[0;34m\"Couldn't find a tree builder with the features you \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    164\u001b[0m                     \u001b[0;34m\"requested: %s. Do you need to install a parser library?\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 165\u001b[0;31m                     % \",\".join(features))\n\u001b[0m\u001b[1;32m    166\u001b[0m             \u001b[0mbuilder\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuilder_class\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    167\u001b[0m             if not (original_features == builder.NAME or\n",
      "\u001b[0;31mFeatureNotFound\u001b[0m: Couldn't find a tree builder with the features you requested: html5lib. Do you need to install a parser library?"
     ]
    }
   ],
   "source": [
    "# !pip install bs4 --user\n",
    "from bs4 import BeautifulSoup\n",
    "\n",
    "input_html = \"aircraft_incidents.htm\"\n",
    "with open(input_html, \"r\") as ifile:\n",
    "    soup = BeautifulSoup(ifile, 'html5lib')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-44e94b499e6c3846",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "Using beautifulsoup4’s `find_all`(list of tags) function, only select the content under those HTML tags. Store the data in a list of strings called `selected_data`, where each year or incident description is a separate string in the list. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-146287ba9d460b19",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Select Year and Incident description. It can be seen that they are usually\n",
    "# <h3> or <li> tags.\n",
    "\n",
    "# Assign the results to variable selected_data\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "selected_data = []\n",
    "for x in soup.find_all(['h3', 'li']):\n",
    "    selected_data.append(x.get_text())\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-40af6a200d729abd",
     "locked": true,
     "points": 5,
     "schema_version": 2,
     "solution": false
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "if not type(selected_data) is list:\n",
    "    raise ValueError(\"For efficiency, please store selected_data as list\")\n",
    "    \n",
    "if len(selected_data) != 1579:\n",
    "    raise ValueError(\"Don't have the expected number of entries\")\n",
    "\n",
    "### BEGIN HIDDEN TESTS\n",
    "if not selected_data[0].startswith('1919'):\n",
    "    raise ValueError(\"Don't have correct start date\")\n",
    "    \n",
    "if not selected_data[1000].startswith('January 25 – RUTACA'):\n",
    "    raise ValueError(\"You probably missed some year or incident\")\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-9fffdc9a7241becc",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "Finally, check if all the HTML tags have been removed. Output the message 'No Tag Found!’, if successful."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-854ceef5597e3c3f",
     "locked": false,
     "schema_version": 2,
     "solution": true
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# TODO: Check if all tags have been removed\n",
    "# Output 'No Tag Found!' if no tags\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "import re\n",
    "\n",
    "result = False\n",
    "for line in selected_data:\n",
    "    result = result or re.search(r\"<.*>\", line)\n",
    "    if result:\n",
    "        print(\"Error: \\n{}\".format(line))\n",
    "\n",
    "if not result:\n",
    "    print(\"No tag found!\")\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-36165889fe9fd8ea",
     "locked": true,
     "points": 2,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN HIDDEN TESTS\n",
    "import re\n",
    "\n",
    "result = False\n",
    "for line in selected_data:\n",
    "    result = result or re.search(r\"<.*>\", line)\n",
    "    if result:\n",
    "        raise ValueError(\"There are still some tags\")\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-f747efefbb52cce0",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "selected_data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-c420119707a381d1",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "Now we'd like you to save the results to a file called `incidents_raw.txt`.  You can use the file commands: `open`, `write`, and `close`.  Be sure to write a newline (`\\n`) after each line, so that later you can read the lines back."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-b2b7ce15b6605e03",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Write selected_data to incidents_raw.txt\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "f = open(\"incidents_raw.txt\", \"w\")\n",
    "for str in selected_data:\n",
    "    f.write(str + '\\n')\n",
    "f.close()\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-b857e3e795c17372",
     "locked": true,
     "points": 5,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN HIDDEN TESTS\n",
    "f = open('incidents_raw.txt', 'r')\n",
    "if not f.readline() == '1919[edit]\\n':\n",
    "    raise ValueError(\"You might have forgotten to add a line break at each line\")\n",
    "f.close()\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-e13f67af562ea90b",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "## Step 2: Simple Data Cleaning\n",
    "\n",
    "Now we need to do some further cleaning to both the CSV and text data.\n",
    "\n",
    "(use Insert|Insert Cell Above or Insert Cell Below as needed to add further cells)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-94479eadb74b8eef",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "## 2.1 Cleaning Tabular Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-75d19d513351504b",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "We are going to clean the `airlines_df`, `airports_df`, and `routes_df` DataFrames.  First, run a \"helper\" function we've defined for you.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-de42a7fc839805a5",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# Replace NaNs with blanks if the column is a string, so everything is of a consistent type\n",
    "def fillna_col(series):\n",
    "    if series.dtype is pd.np.dtype(object):\n",
    "        return series.fillna('')\n",
    "    else:\n",
    "        return series\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-f360bdf5ecb36c78",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "Additionally, define a second function called `nullify` that takes a single parameter `x`. Given the parameter value `\\N` it returns `NaN`, otherwise it returns the value of the parameter."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-a8a5da4f22b315d4",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Define nullify here\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "# Replace \\Ns with NaNs\n",
    "def nullify(x):\n",
    "    if x == '\\\\N':\n",
    "        return pd.np.nan\n",
    "    else: \n",
    "        return x\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-b95399ce633a6b01",
     "locked": true,
     "points": 5,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# !pip install nose --user\n",
    "from nose.tools import assert_equal\n",
    "\n",
    "# Test that nullify on 'abc' just returns the value\n",
    "assert_equal(nullify('abc'), 'abc')\n",
    "\n",
    "# Ditto for an integer\n",
    "assert_equal(nullify(3), 3)\n",
    "\n",
    "### BEGIN HIDDEN TESTS\n",
    "import math\n",
    "assert math.isnan(nullify('\\\\N'))\n",
    "\n",
    "assert_equal(nullify(''), '')\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-31060a2816020d4c",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "### 2.1.1 Regularizing and removing nulls\n",
    "\n",
    "Next, we’ll need to use two functions to apply `nullify` and `fillna_col` to our DataFrames.  \n",
    "\n",
    "The DataFrame applymap function can be used to apply a function to every cell of a DataFrame.  We can use this to apply nullify to all of the elements in each of our DataFrames (airports, airlines, etc.) and get rid of all of the “\\N”s.\n",
    "\n",
    "The DataFrame `apply` function can be used to apply a function to every column of a DataFrame.  Let’s use that to call `fillna_col `on the DataFrames -- replacing the NaNs with blank strings if the column is otherwise an object.\n",
    "Also, let’s get rid of rows in `routes_df` that have null airline, source, or destination IDs.  Recall that `dropna` can be used here.\n",
    "\n",
    "You’ll want to update your DataFrames using all of the above functions.  Think carefully about the order in which to apply these.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-954268ac86316ce5",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: regularize and remove nulls according to Step 2\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "airports_df = airports_df.applymap(nullify)\n",
    "airports_df = airports_df.apply(fillna_col)\n",
    "\n",
    "airlines_df = airlines_df.applymap(nullify)\n",
    "airlines_df = airlines_df.apply(fillna_col)\n",
    "\n",
    "routes_df = routes_df.applymap(nullify)\n",
    "routes_df = routes_df.dropna(subset = [\"airline_id\", \"source_id\", \"target_id\"])\n",
    "routes_df = routes_df.apply(fillna_col)\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-4ae56839087fe040",
     "locked": true,
     "points": 5,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "if airports_df.isnull().sum().sum() != 0:\n",
    "    raise ValueError('airports_df still has NaNs')\n",
    "    \n",
    "if airlines_df.isnull().sum().sum() != 0:\n",
    "    raise ValueError('airlines_df still has Nans')\n",
    "    \n",
    "if routes_df.isnull().sum().sum() != 0:\n",
    "    raise ValueError('routes_df still has Nans')\n",
    "    \n",
    "### BEGIN HIDDEN TESTS\n",
    "def is_N(x):\n",
    "    if x == '\\\\N':\n",
    "        return True\n",
    "    else:\n",
    "        return False\n",
    "    \n",
    "if airports_df.applymap(is_N).sum().sum() != 0:\n",
    "    raise ValueError(\"airports_df still has '\\\\N'\")\n",
    "    \n",
    "if airlines_df.applymap(is_N).sum().sum() != 0:\n",
    "    raise ValueError(\"airlines_df still has '\\\\N'\")\n",
    "    \n",
    "if routes_df.applymap(is_N).sum().sum() != 0:\n",
    "    raise ValueError(\"routes_df still has '\\\\N'\")\n",
    "    \n",
    "def if_empty(x):\n",
    "    if x == '':\n",
    "        return True;\n",
    "    else :\n",
    "        return False\n",
    "    \n",
    "if routes_df[[\"airline_id\", \"source_id\", \"target_id\"]].applymap(if_empty).sum().sum() != 0:\n",
    "    raise ValueError(\"You probably didn't drop nulls in the three fields \")\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-912a6ca1e721172f",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "### 2.1.2 Changing column types\n",
    "\n",
    "After all of this, `routes_df.airline_id` will only have integers, but will still have its existing type of object.  Later we’ll need it to be an integer, so that it can be compared directly with the entries from `airlines_df` and `airports_df`.  Let’s convert it to integer via:\n",
    "\n",
    "```\n",
    "routes_df['airline_id'] = routes_df['airline_id'].astype(int)\n",
    "```\n",
    "\n",
    "Repeat the same process for the source and destination airport IDs.  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-bd8e18efbbbe776a",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Change column types according to Step 2\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "routes_df['airline_id'] = routes_df['airline_id'].astype(int)\n",
    "routes_df['source_id'] = routes_df['source_id'].astype(int)\n",
    "routes_df['target_id'] = routes_df['target_id'].astype(int)\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-1e71462e11539493",
     "locked": true,
     "points": 2,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN HIDDEN TESTS\n",
    "if routes_df['airline_id'].dtype != 'int64':\n",
    "    raise ValueError('routes_df.airline_id is not int type')\n",
    "\n",
    "if routes_df['source_id'].dtype != 'int64':\n",
    "    raise ValueError('routes_df.source_id is not int type')\n",
    "    \n",
    "if routes_df['target_id'].dtype != 'int64':\n",
    "    raise ValueError('routes_df.target_id is not int type')\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.2 Cleaning the Text Data\n",
    "\n",
    "We will clean the raw text data we stored in `incidents_raw.txt`. For each incident, we want it in the form:\n",
    "\n",
    "```\n",
    "1997 January 9 , Comair Flight 3272, an Embraer EMB 120 Brasília, crashes near Ida, Michigan, during a snowstorm, killing all 29 on board.\n",
    "```\n",
    "\n",
    "Points to follow during cleaning:\n",
    "\n",
    "* Remove `[edit]` from the year\n",
    "\n",
    "* Only select incidents that have occured in the year >= 1997\n",
    "\n",
    "* Since we extracted the data using tags `<h3>` and `<li>`, it is possible that there was other data extracted too. See the end of file `incidents_raw.txt`. However, if we look at the format of all the incidents, we can see that they all contain: *month*, the word `Flight` and the symbol `–`. Use these conditions to filter out unwanted data.\n",
    "\n",
    "* Store all the cleaned incidents in a list named `clean_incidents`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-ceea19f19ebf454e",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Read and clean raw text file and store in clean_incidents\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "months = ['January', 'February', 'March', 'April', 'May', 'June', 'July',\\\n",
    "          'August', 'September', 'October', 'November', 'December']\n",
    "\n",
    "clean_incidents = []\n",
    "\n",
    "with open(\"incidents_raw.txt\", \"r\") as ifile:\n",
    "    year = '0'\n",
    "    for line in ifile:\n",
    "        #remove '[edit]' from Year\n",
    "        if '[edit]' in line:\n",
    "            year = line.replace('[edit]', '')\n",
    "        else:\n",
    "            #filter incidents after 1997, make sure text contains month, '-' and 'Flight'\n",
    "            if int(year) >= 1997 \\\n",
    "            and any(month in line for month in months)\\\n",
    "            and '–' in line and 'Flight' in line:\n",
    "                newline = year.strip() + ' ' + line.replace('–', ',')\n",
    "                clean_incidents.append(newline)\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-e3837c3950273c5f",
     "locked": true,
     "points": 8,
     "schema_version": 2,
     "solution": false
    },
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "if len(clean_incidents) != 331:\n",
    "    raise ValueError(\"Don't have the expected number of entries\")\n",
    "\n",
    "if not clean_incidents[0].startswith('1997'):\n",
    "    raise ValueError(\"Don't have the expected start date\")\n",
    "\n",
    "### BEGIN HIDDEN TESTS\n",
    "if not clean_incidents[3].startswith('1997 May 8'):\n",
    "    raise ValueError(\"You probably combined year and month incorrectly\")\n",
    "\n",
    "if not clean_incidents[330].startswith('2018 January 13'):\n",
    "    raise ValueError(\"You probably didn't remove unwanted data\")\n",
    "\n",
    "if clean_incidents[5].startswith('1997[edit] July 17'):\n",
    "    raise ValueError('You likely forgot to remove [edit]')\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have all the aircraft incidents since 1997, we need to convert them into a Pandas DataFrame. Use the empty dataframe `incidents_df`.  For each entry in clean_incidents, extract the date, airline name and flight number (only the part that comes after `Flight`, and you should remove what are called \"stop words\" like a, an, the) then store it as a new row in `incidents_df`. Set the column type of `incidents_df['Date']` to `datetime`. Drop any duplicates from `incidents_df`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-7f09f0046a223b2a",
     "locked": false,
     "schema_version": 2,
     "solution": true
    },
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "# TODO: Convert clean_incidents into dataframe incidents_df\n",
    "\n",
    "# You might find the Natural Language Toolkit (nltk) useful.\n",
    "# See https://www.nltk.org/ for details.\n",
    "#\n",
    "# The stopwords module will let you find and remove not-very-useful\n",
    "# words like articles ('the', 'a').\n",
    "\n",
    "# ! pip install nltk --user\n",
    "import nltk\n",
    "# nltk.download('stopwords')\n",
    "from nltk.corpus import stopwords\n",
    "\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "incidents_df = pd.DataFrame(columns=['Date', 'Airline', 'FlightNum'])\n",
    "\n",
    "temp = []\n",
    "for line in clean_incidents:\n",
    "        icd = {'Date':'', 'Airline':'', 'FlightNum':''}\n",
    "        \n",
    "        #Date is always in the beginning of each entry and ends with ','\n",
    "        icd['Date'] = line[:line.index(',')].strip()\n",
    "        \n",
    "        #Airline is mostly mentioned after Date and before Flight\n",
    "        icd['Airline'] = line[line.index(',')+1: line.index('Flight')].strip()\n",
    "\n",
    "        #Flight always contains 'Flight' and ends with ',' or ' '\n",
    "        icd['FlightNum'] = line[line.index('Flight')+6:\\\n",
    "                                line.index(' ', line.index('Flight')+7)].strip()\n",
    "        #removes ',' from Flight\n",
    "        if ',' in icd['FlightNum']:\n",
    "            icd['FlightNum'] = icd['FlightNum'].replace(',','')\n",
    "        \n",
    "        temp.append(icd)\n",
    "\n",
    "incidents_df = pd.DataFrame(temp)\n",
    "\n",
    "def remove_extra_text(x):\n",
    "    stop_words = stopwords.words('english')\n",
    "    stop_words.append(\"On\")\n",
    "    words = x.split(' ')\n",
    "    if ([w for w in words if w in stop_words]):\n",
    "        i = [j for j in range(len(words)-1, -1, -1) \\\n",
    "             if words[j].islower() \\\n",
    "             or words[j].lower() in stop_words]\n",
    "        return ' '.join(words[i[0]+1:])\n",
    "    else:\n",
    "        return x\n",
    "\n",
    "incidents_df['Airline'] = incidents_df['Airline'].apply(remove_extra_text)\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-a81f9d66e8487832",
     "locked": true,
     "points": 7,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "if len(incidents_df) != 331:\n",
    "    raise ValueError(\"Don't have the expected number of entries\")\n",
    "\n",
    "if incidents_df.shape[1] != 3:\n",
    "    raise ValueError(\"Don't have the expected number of fields\")\n",
    "\n",
    "if not ((incidents_df['Airline'] == 'Cebu Pacific') & \\\n",
    "        (incidents_df['Date'] == '1998 February 2') & \\\n",
    "        (incidents_df['FlightNum'] == '387')).any():\n",
    "    raise ValueError('You might need to clean your data a bit better')\n",
    "\n",
    "### BEGIN HIDDEN TESTS\n",
    "if not ((incidents_df['Airline'] == 'EgyptAir') & \\\n",
    "        (incidents_df['Date'] == '2016 May 19') & \\\n",
    "        (incidents_df['FlightNum'] == '804')).any():\n",
    "    raise ValueError('You might need to clean your data a bit better')\n",
    "\n",
    "if not ((incidents_df['Airline'] == 'Pulkovo Aviation Enterprise') & \\\n",
    "        (incidents_df['Date'] == '2006 August 22') & \\\n",
    "        (incidents_df['FlightNum'] == '612')).any():\n",
    "    raise ValueError('You might need to clean your data a bit better')\n",
    "### END HIDDEN TESTS                                                                                                        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-96470c815e41130a",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Change column type of 'Date' and drop duplicates\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "incidents_df['Date'] = pd.to_datetime(incidents_df['Date'])\n",
    "incidents_df = incidents_df.drop_duplicates()\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-3f474e7b9c896f48",
     "locked": true,
     "points": 2,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "### BEGIN HIDDEN TESTS\n",
    "if incidents_df['Date'].dtype != 'datetime64[ns]':\n",
    "    raise ValueError(\"Don't have the expected column type\")\n",
    "if incidents_df.duplicated().sum() != 0:\n",
    "    raise ValueError(\"You probably forgot to remove duplicates\")\n",
    "### END HIDDEN TESTS"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-f8b1de7d84b2b7f9",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "## Final Output\n",
    "\n",
    "The following cells just show what the data looks like.  You should sanity check that it makes sense."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-9cedd3e918ef306f",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "airports_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-1e0276c0f79b16b7",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "airlines_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-0d4bd847074c29a8",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "routes_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-f1220659a0aa61fe",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "incidents_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-87dd63135d33c42d",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "source": [
    "## Step 3: Making Data “Persistent”\n",
    "\n",
    "Now let’s actually save the data in a persistent way, specifically using a relational database.  For simplicity we’ll use SQLite here, but we could alternatively use a DBMS such as MySQL or PostgreSQL on the cloud (or in another Docker container).\n",
    "\n",
    "The cell below establishes a connection to an SQLite database, which will be written to the file HW1_DB in your HW1 Jupyter directory."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-881903cd3ed76337",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "import sqlite3\n",
    "engine = sqlite3.connect('HW1_DB')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now save each of your DataFrames (`airlines_df`, `airports_df`, `flights_df`, `routes_df`, `incidents_df`) to the database.  To do this, call the `to_sql` method (make sure to not save the `index` column since it doesn't matter!) on the DataFrame.  Give it a table name matching the DataFrame name, and set the flag `if_exists=’replace’` in case you want to run this multiple times.\n",
    "\n",
    "Once this is all done, you can move on to Homework 1, Part 2, which will use the DataFrames saved to the SQL database."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-4dbf1418023570da",
     "locked": false,
     "schema_version": 2,
     "solution": true
    }
   },
   "outputs": [],
   "source": [
    "# TODO:  Use to_sql to save your Dataframes\n",
    "\n",
    "### BEGIN SOLUTION\n",
    "airports_df.to_sql('airports', engine, if_exists='replace', index = None)\n",
    "airlines_df.to_sql('airlines', engine, if_exists='replace', index = None)\n",
    "routes_df.to_sql('routes', engine, if_exists='replace', index = None)\n",
    "flights_df.to_sql('performance', engine, if_exists='replace', index = None)\n",
    "incidents_df.to_sql('incidents', engine, if_exists='replace', index = None)\n",
    "\n",
    "engine.commit()\n",
    "### END SOLUTION"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "nbgrader": {
     "grade": true,
     "grade_id": "cell-5784fc9c2b6f6dac",
     "locked": true,
     "points": 0,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "# Test that the data is there!\n",
    "\n",
    "cursor = engine.execute('select * from airports limit 1000')\n",
    "rows = cursor.fetchall()\n",
    "rows\n",
    "\n",
    "if len(rows) < 1000:\n",
    "    raise ValueError('Somehow fewer than 1000 airports were written')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "nbgrader": {
     "grade": false,
     "grade_id": "cell-a76a597a77514848",
     "locked": true,
     "schema_version": 2,
     "solution": false
    }
   },
   "outputs": [],
   "source": [
    "incidents_df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "celltoolbar": "Create Assignment",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
